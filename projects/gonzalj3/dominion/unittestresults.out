Testing salvager.	
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Error: Number of Coins has not increased by the correct number of coins.
Coins should Be: 10 and is 14.
Number of Buys should Be: 2 and is 2.
The number of feast card piles is 0 and is suppose to be 0. 
File 'cardtest1.c'
Lines executed:68.57% of 35
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:20.10% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest1.c buyCard 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "salvager"
        -:   13:
        1:   14:void changeCheck(int card, struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int x=0, numFeast =0; 
        1:   17:	if(G->coins != (testG->coins+4))
        -:   18:		{
        1:   19:			printf("Error: Number of Coins has not increased by the correct number of coins.\n");
        -:   20:		}
    #####:   21:	else if(G->numBuys != (testG->numBuys+1))
        -:   22:		{
    #####:   23:			printf("Error: Number of Buys has not increased by one.\n");
        -:   24:		}
    #####:   25:	else if(G->supplyCount[card] == (testG->supplyCount[card]+1))
        -:   26:		{
    #####:   27:			printf("Error: Number of cards in draw pile has increased when no change should have occurred.\n");
        -:   28:		}
    #####:   29:	else if(G->handCount[0] != (testG->handCount[0]-1))
        -:   30:		{
    #####:   31:			printf("Error: Number of cards player's hand did not decrease.\n");
        -:   32:		}		
    #####:   33:	else if(G->deckCount[0] != (testG->deckCount[0]-1))
        -:   34:		{
    #####:   35:			printf("Error: Number of cards in the player's hand and deck did not decrease.\n");
        -:   36:		}	
        -:   37:	else
        -:   38:		{
    #####:   39:			printf("Past Check Changes Test.\n");
        -:   40:		}
        1:   41:			printf("Coins should Be: %d and is %d.\n",G->coins,testG->coins+4);
        1:   42:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys+1);
        5:   43:	for(; x<G->handCount[0];x++)
        -:   44:	{
        4:   45:		if(G->hand[0][x]==feast)
        -:   46:		{
    #####:   47:			numFeast++;
        -:   48:		}	
        -:   49:	}
        1:   50:	printf("The number of feast card piles is %d and is suppose to be 0. \n",numFeast);	}
        -:   51:
        -:   52:
        1:   53:int main(){
        -:   54:	struct gameState G, testG;
        1:   55:	int numberOfPlayers = 2;
        1:   56:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   57:               , remodel, smithy, village, baron, great_hall};
        1:   58:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, x=0;
        1:   59:	int seed = 45;
        -:   60:
        1:   61:	printf("Testing salvager.	\n");
        1:   62:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   63:	G.coins = 10;
        6:   64:	for(; x<G.handCount[0];x++)
        -:   65:	{
        5:   66:		if(G.hand[0][x]==feast)
        -:   67:		{
    #####:   68:			G.hand[0][x]=gardens;
        -:   69:		}	
        -:   70:	}
        1:   71:	G.hand[0][0] = feast;
        -:   72:	
        1:   73:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   74:	cardEffect(salvager, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   75:	changeCheck(KARD,&G,&testG);
        -:   76:
        -:   77:
        1:   78:	return 0 ;
        -:   79:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
    #####:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
    #####:   29:    for (i = 0; i < state->numPlayers; i++){
    #####:   30:        if (i != currentPlayer){
    #####:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
    #####:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
    #####:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
    #####:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
    #####:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
    #####:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
    #####:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
    #####:   79:  discardCard(handPos, currentPlayer, state, 0);
    #####:   80:}
        -:   81:
    #####:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
    #####:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
    #####:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
    #####:   89:    drawCard(currentPlayer, state);
    #####:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
    #####:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
    #####:  103:}
        -:  104:
       30:  105:int compare(const void* a, const void* b) {
       30:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
       30:  108:  if (*(int*)a < *(int*)b)
        8:  109:    return -1;
       22:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
        1:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
        1:  141:  SelectStream(1);
        1:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
        1:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
        1:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
       11:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
      110:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
      100:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
        1:  170:  if (numPlayers == 2)
        -:  171:    {
        1:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
    #####:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
    #####:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
        1:  184:  if (numPlayers == 2)
        -:  185:    {
        1:  186:      state->supplyCount[estate] = 8;
        1:  187:      state->supplyCount[duchy] = 8;
        1:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
    #####:  192:      state->supplyCount[estate] = 12;
    #####:  193:      state->supplyCount[duchy] = 12;
    #####:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
        1:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  199:  state->supplyCount[silver] = 40;
        1:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
       21:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
      165:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
      155:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
       10:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
        4:  212:		  if (numPlayers == 2){ 
        2:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
    #####:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
        8:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
       10:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
      145:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
        3:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
        2:  237:      state->deckCount[i] = 0;
        8:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
        6:  240:	  state->deck[i][j] = estate;
        6:  241:	  state->deckCount[i]++;
        -:  242:	}
       16:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
       14:  245:	  state->deck[i][j] = copper;
       14:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
        3:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
        2:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
        3:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
        2:  263:      state->handCount[i] = 0;
        2:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
       28:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
       27:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
        1:  279:  state->outpostPlayed = 0;
        1:  280:  state->phase = 0;
        1:  281:  state->numActions = 1;
        1:  282:  state->numBuys = 1;
        1:  283:  state->playedCardCount = 0;
        1:  284:  state->whoseTurn = 0;
        1:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
        6:  289:  for (it = 0; it < 5; it++){
        5:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
        1:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
        1:  295:  return 0;
        -:  296:}
        -:  297:
        2:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
        2:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
        2:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
        2:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
       24:  311:  while (state->deckCount[player] > 0) {
       20:  312:    card = floor(Random() * state->deckCount[player]);
       20:  313:    newDeck[newDeckPos] = state->deck[player][card];
       20:  314:    newDeckPos++;
       83:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
       63:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
       20:  318:    state->deckCount[player]--;
        -:  319:  }
       22:  320:  for (i = 0; i < newDeckPos; i++) {
       20:  321:    state->deck[player][i] = newDeck[i];
       20:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
        2:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
    #####:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
    #####:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
    #####:  377:  who = state->whoseTurn;
        -:  378:
    #####:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
    #####:  381:      printf("You do not have any buys left\n");
    #####:  382:    return -1;
    #####:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
    #####:  385:      printf("There are not any of that type of card left\n");
    #####:  386:    return -1;
    #####:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
    #####:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  390:    return -1;
        -:  391:  } else {
    #####:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
    #####:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
    #####:  396:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
    #####:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
    #####:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
    #####:  417:int supplyCount(int card, struct gameState *state) {
    #####:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
        1:  443:int whoseTurn(struct gameState *state) {
        1:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
    #####:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
    #####:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
    #####:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
    #####:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
    #####:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
    #####:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
    #####:  467:  state->outpostPlayed = 0;
    #####:  468:  state->phase = 0;
    #####:  469:  state->numActions = 1;
    #####:  470:  state->coins = 0;
    #####:  471:  state->numBuys = 1;
    #####:  472:  state->playedCardCount = 0;
    #####:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
    #####:  477:  for (k = 0; k < 5; k++){
    #####:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
    #####:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
    #####:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
        5:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
        5:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
        5:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
        5:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
        5:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  673:    state->deckCount[player]--;
        5:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
        5:  677:  return 0;
        -:  678:}
        -:  679:
    #####:  680:int getCost(int cardNumber)
        -:  681:{
    #####:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
    #####:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        1:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        1:  750:  int currentPlayer = whoseTurn(state);
        1:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        1:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        1:  756:  temphandP = &temphand;
        1:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        1:  759:  int z = 0;// this is the counter for the temp hand
        1:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        1:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
    #####:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
    #####:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
    #####:  915:      newSmithy(currentPlayer, state, handPos);
    #####:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
    #####: 1228:        newSeaHag(currentPlayer,state);
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        1: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        1: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        1: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        1: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        1: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        1: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        1: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        1: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        1: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        1: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
        1: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        1: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
        6: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
        5: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
        5: 1352:	  state->coins += 1;
        -: 1353:	}
    #####: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
    #####: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        1: 1365:  state->coins += bonus;
        -: 1366:
        1: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing seahag after initializing game, so current player should be 0.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Error: found only 1 curses.
Error: Player did not increase discard count.
File 'cardtest2.c'
Lines executed:87.10% of 31
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:22.68% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardttest2.c seahag
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "sea_hag"
        -:   13:
        1:   14:void changeCheck(int currentPlayer, struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int x = 0, i = 0, foundCurse = 0, foundDiscard = 0;
        -:   17:	
        5:   18:	for(; x<testG->numPlayers;x++)
        -:   19:	{
        4:   20:		if(x != currentPlayer)
        -:   21:		{
       13:   22:			for(; i< testG->deckCount[x];i++)
        -:   23:				{
       10:   24:					if(G->deck[x][i]!=testG->deck[x][i])
        -:   25:					{
        1:   26:						if(G->deck[x][i]==curse)
        -:   27:						{
        1:   28:							foundCurse++;
        -:   29:						}	
        -:   30:					}
        -:   31:				}
        -:   32:		}
        -:   33:	}
        -:   34:	
        1:   35:	if(foundCurse == 3)
        -:   36:	{
    #####:   37:		printf("Past Test: Found curses.\n");
        -:   38:	}
        -:   39:	else
        -:   40:	{
        1:   41:		printf("Error: found only %d curses.\n",foundCurse);
        -:   42:	}
        -:   43:	
        1:   44:	x=0;
        -:   45:	
        1:   46:	for(; x<G->discardCount[currentPlayer];x++)
        -:   47:	{
    #####:   48:		if(G->discard[currentPlayer][x] != testG->discard[currentPlayer][x])
        -:   49:		{
    #####:   50:			foundDiscard++;
        -:   51:		}
        -:   52:	}
        -:   53:	
        1:   54:	if(foundCurse != 1)
        -:   55:	{
    #####:   56:		printf("Error: Player does not have a new discarded card.\n");
        -:   57:	}
        -:   58:	
        1:   59:	if(G->discardCount[currentPlayer]==testG->discardCount[currentPlayer])
        -:   60:	{
        1:   61:		printf("Error: Player did not increase discard count.\n");
        -:   62:	}
        1:   63:}
        -:   64:
        1:   65:int main(){
        -:   66:	struct gameState G, testG;
        1:   67:	int numberOfPlayers = 4;
        1:   68:	int kards[10]={adventurer, salvager, sea_hag, gardens, mine
        -:   69:               , remodel, smithy, village, baron, great_hall};
        1:   70:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   71:	int seed = 45;
        -:   72:
        1:   73:	printf("Testing seahag after initializing game, so current player should be 0.\n");
        1:   74:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   75:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   76:	cardEffect(sea_hag, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   77:	changeCheck(0,&G,&testG);
        -:   78:
        -:   79:
        1:   80:	return 0 ;
        -:   81:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
    #####:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
    #####:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
    #####:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
    #####:   79:  discardCard(handPos, currentPlayer, state, 0);
    #####:   80:}
        -:   81:
    #####:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
    #####:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
    #####:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
    #####:   89:    drawCard(currentPlayer, state);
    #####:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
    #####:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
    #####:  103:}
        -:  104:
       90:  105:int compare(const void* a, const void* b) {
       90:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
       90:  108:  if (*(int*)a < *(int*)b)
       24:  109:    return -1;
       66:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
        2:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
        2:  141:  SelectStream(1);
        2:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
        2:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
        2:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
       22:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
      220:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
      200:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
        2:  170:  if (numPlayers == 2)
        -:  171:    {
        1:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        1:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        1:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
        2:  184:  if (numPlayers == 2)
        -:  185:    {
        1:  186:      state->supplyCount[estate] = 8;
        1:  187:      state->supplyCount[duchy] = 8;
        1:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        1:  192:      state->supplyCount[estate] = 12;
        1:  193:      state->supplyCount[duchy] = 12;
        1:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
        2:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  199:  state->supplyCount[silver] = 40;
        2:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
       42:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
      330:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
      310:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
       20:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
        8:  212:		  if (numPlayers == 2){ 
        2:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        2:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
       16:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
       20:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
      290:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
        8:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
        6:  237:      state->deckCount[i] = 0;
       24:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       18:  240:	  state->deck[i][j] = estate;
       18:  241:	  state->deckCount[i]++;
        -:  242:	}
       48:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
       42:  245:	  state->deck[i][j] = copper;
       42:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
        8:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
        6:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
        8:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
        6:  263:      state->handCount[i] = 0;
        6:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
       56:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
       54:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
        2:  279:  state->outpostPlayed = 0;
        2:  280:  state->phase = 0;
        2:  281:  state->numActions = 1;
        2:  282:  state->numBuys = 1;
        2:  283:  state->playedCardCount = 0;
        2:  284:  state->whoseTurn = 0;
        2:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       12:  289:  for (it = 0; it < 5; it++){
       10:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
        2:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
        2:  295:  return 0;
        -:  296:}
        -:  297:
        6:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
        6:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
        6:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
        6:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
       72:  311:  while (state->deckCount[player] > 0) {
       60:  312:    card = floor(Random() * state->deckCount[player]);
       60:  313:    newDeck[newDeckPos] = state->deck[player][card];
       60:  314:    newDeckPos++;
      238:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      178:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
       60:  318:    state->deckCount[player]--;
        -:  319:  }
       66:  320:  for (i = 0; i < newDeckPos; i++) {
       60:  321:    state->deck[player][i] = newDeck[i];
       60:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
        6:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
    #####:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
    #####:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
    #####:  377:  who = state->whoseTurn;
        -:  378:
    #####:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
    #####:  381:      printf("You do not have any buys left\n");
    #####:  382:    return -1;
    #####:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
    #####:  385:      printf("There are not any of that type of card left\n");
    #####:  386:    return -1;
    #####:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
    #####:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  390:    return -1;
        -:  391:  } else {
    #####:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
    #####:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
    #####:  396:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
    #####:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
    #####:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
    #####:  417:int supplyCount(int card, struct gameState *state) {
    #####:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
        2:  443:int whoseTurn(struct gameState *state) {
        2:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
    #####:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
    #####:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
    #####:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
    #####:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
    #####:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
    #####:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
    #####:  467:  state->outpostPlayed = 0;
    #####:  468:  state->phase = 0;
    #####:  469:  state->numActions = 1;
    #####:  470:  state->coins = 0;
    #####:  471:  state->numBuys = 1;
    #####:  472:  state->playedCardCount = 0;
    #####:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
    #####:  477:  for (k = 0; k < 5; k++){
    #####:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
    #####:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
    #####:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       10:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       10:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       10:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       10:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       10:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  673:    state->deckCount[player]--;
       10:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       10:  677:  return 0;
        -:  678:}
        -:  679:
    #####:  680:int getCost(int cardNumber)
        -:  681:{
    #####:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
    #####:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        2:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        2:  750:  int currentPlayer = whoseTurn(state);
        2:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        2:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        2:  756:  temphandP = &temphand;
        2:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        2:  759:  int z = 0;// this is the counter for the temp hand
        2:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        2:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
    #####:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
    #####:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
    #####:  915:      newSmithy(currentPlayer, state, handPos);
    #####:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        1: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        1: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        1: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        1: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        1: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        1: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        1: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        1: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        1: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        1: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
        2: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        2: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       12: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       10: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       10: 1352:	  state->coins += 1;
        -: 1353:	}
    #####: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
    #####: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        2: 1365:  state->coins += bonus;
        -: 1366:
        2: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing smithy.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Current hand count: 5
Current hand count: 6
Current hand count: 7
Current hand count: 8
The size of the deck before smithy is 5 and after it is 1.
Error: Number of cards player's hand did not increase.
Error: Number of cards in player's deck did not decrease by 3.
Hand count should Be: 8 and is 7.
Deck count should Be: 1 and is 2.
File 'cardtest3.c'
Lines executed:95.65% of 23
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:24.23% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardtest3.c smithy 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "smithy"
        -:   13:
        1:   14:void changeCheck(struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int exHandC = (testG->handCount[0]+2);
        1:   17:	int exDeckC = (testG->deckCount[0]-3);
        1:   18:	if(G->handCount[0] != exHandC)
        -:   19:	{
        1:   20:			printf("Error: Number of cards player's hand did not increase.\n");
        -:   21:	}
        1:   22:	if(G->deckCount[0] != exDeckC)
        -:   23:	{
        1:   24:			printf("Error: Number of cards in player's deck did not decrease by 3.\n");
        -:   25:	}
        -:   26:	else
        -:   27:		{
    #####:   28:			printf("Past Check Changes Test.\n");
        -:   29:		}
        1:   30:			printf("Hand count should Be: %d and is %d.\n",G->handCount[0],exHandC);
        1:   31:			printf("Deck count should Be: %d and is %d.\n",G->deckCount[0],exDeckC);
        1:   32:}
        -:   33:
        1:   34:int main(){
        -:   35:	struct gameState G, testG;
        1:   36:	int numberOfPlayers = 2;
        1:   37:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   38:               , remodel, smithy, village, baron, great_hall};
        1:   39:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, x=0;
        1:   40:	int seed = 9380;
        -:   41:
        1:   42:	printf("Testing smithy.\n");
        1:   43:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   45:	cardEffect(smithy, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   46:	printf("The size of the deck before smithy is %d and after it is %d.\n",testG.deckCount[0],G.deckCount[0]);
        1:   47:	changeCheck(&G, &testG);
        -:   48:
        -:   49:
        1:   50:	return 0 ;
        -:   51:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
        1:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
        5:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
        4:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
        1:   79:  discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
    #####:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
    #####:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
    #####:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
    #####:   89:    drawCard(currentPlayer, state);
    #####:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
    #####:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
    #####:  103:}
        -:  104:
      120:  105:int compare(const void* a, const void* b) {
      120:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
      120:  108:  if (*(int*)a < *(int*)b)
       32:  109:    return -1;
       88:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
        3:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
        3:  141:  SelectStream(1);
        3:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
        3:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
        3:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
       33:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
      330:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
      300:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
        3:  170:  if (numPlayers == 2)
        -:  171:    {
        2:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        1:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        1:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
        3:  184:  if (numPlayers == 2)
        -:  185:    {
        2:  186:      state->supplyCount[estate] = 8;
        2:  187:      state->supplyCount[duchy] = 8;
        2:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        1:  192:      state->supplyCount[estate] = 12;
        1:  193:      state->supplyCount[duchy] = 12;
        1:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
        3:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  199:  state->supplyCount[silver] = 40;
        3:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
       63:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
      495:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
      465:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
       30:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
       12:  212:		  if (numPlayers == 2){ 
        4:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        2:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
       24:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
       30:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
      435:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
       11:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
        8:  237:      state->deckCount[i] = 0;
       32:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       24:  240:	  state->deck[i][j] = estate;
       24:  241:	  state->deckCount[i]++;
        -:  242:	}
       64:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
       56:  245:	  state->deck[i][j] = copper;
       56:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
       11:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
        8:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
       11:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
        8:  263:      state->handCount[i] = 0;
        8:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
       84:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
       81:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
        3:  279:  state->outpostPlayed = 0;
        3:  280:  state->phase = 0;
        3:  281:  state->numActions = 1;
        3:  282:  state->numBuys = 1;
        3:  283:  state->playedCardCount = 0;
        3:  284:  state->whoseTurn = 0;
        3:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       18:  289:  for (it = 0; it < 5; it++){
       15:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
        3:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
        3:  295:  return 0;
        -:  296:}
        -:  297:
        8:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
        8:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
        8:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
        8:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
       96:  311:  while (state->deckCount[player] > 0) {
       80:  312:    card = floor(Random() * state->deckCount[player]);
       80:  313:    newDeck[newDeckPos] = state->deck[player][card];
       80:  314:    newDeckPos++;
      299:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      219:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
       80:  318:    state->deckCount[player]--;
        -:  319:  }
       88:  320:  for (i = 0; i < newDeckPos; i++) {
       80:  321:    state->deck[player][i] = newDeck[i];
       80:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
        8:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
    #####:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
    #####:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
    #####:  377:  who = state->whoseTurn;
        -:  378:
    #####:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
    #####:  381:      printf("You do not have any buys left\n");
    #####:  382:    return -1;
    #####:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
    #####:  385:      printf("There are not any of that type of card left\n");
    #####:  386:    return -1;
    #####:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
    #####:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  390:    return -1;
        -:  391:  } else {
    #####:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
    #####:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
    #####:  396:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
    #####:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
    #####:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
    #####:  417:int supplyCount(int card, struct gameState *state) {
    #####:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
        3:  443:int whoseTurn(struct gameState *state) {
        3:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
    #####:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
    #####:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
    #####:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
    #####:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
    #####:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
    #####:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
    #####:  467:  state->outpostPlayed = 0;
    #####:  468:  state->phase = 0;
    #####:  469:  state->numActions = 1;
    #####:  470:  state->coins = 0;
    #####:  471:  state->numBuys = 1;
    #####:  472:  state->playedCardCount = 0;
    #####:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
    #####:  477:  for (k = 0; k < 5; k++){
    #####:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
    #####:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
    #####:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       19:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       19:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       19:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       19:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       19:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       19:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       19:  673:    state->deckCount[player]--;
       19:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       19:  677:  return 0;
        -:  678:}
        -:  679:
    #####:  680:int getCost(int cardNumber)
        -:  681:{
    #####:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
    #####:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        3:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        3:  750:  int currentPlayer = whoseTurn(state);
        3:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        3:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        3:  756:  temphandP = &temphand;
        3:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        3:  759:  int z = 0;// this is the counter for the temp hand
        3:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        3:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
    #####:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
    #####:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
        1:  915:      newSmithy(currentPlayer, state, handPos);
        1:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        2: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        2: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        2: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        2: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        2: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        2: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        2: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        2: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        2: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
        3: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        3: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       18: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       15: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       13: 1352:	  state->coins += 1;
        -: 1353:	}
        2: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
        2: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        3: 1365:  state->coins += bonus;
        -: 1366:
        3: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing adventurer.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Current hand count: 5
Current hand count: 6
Error: Number of discarded cards does not equal what is expected.
File 'cardtest4.c'
Lines executed:75.00% of 36
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:26.12% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardtest4.c adventurer 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "adventurer"
        -:   13:
        1:   14:void changeCheck(struct gameState *G, struct gameState *oldG)
        -:   15:{
        1:   16:	int newlyDiscarded =0, x =0, counter =0, counterNew = 0;
        1:   17:	newlyDiscarded = oldG->deckCount[0] - G->deckCount[0];
        6:   18:	for(; x<oldG->handCount[0];x++)
        -:   19:	{
        5:   20:		if(oldG->hand[0][x] ==copper)
        -:   21:		{
        3:   22:			counter++;
        -:   23:		}
        5:   24:		if(oldG->hand[0][x] ==silver)
        -:   25:		{
    #####:   26:			counter++;
        -:   27:		}
        5:   28:		if(oldG->hand[0][x] ==gold)
        -:   29:		{
    #####:   30:			counter++;
        -:   31:		}
        -:   32:		
        -:   33:	}
        -:   34:	
        3:   35:	for(; x<G->handCount[0];x++)
        -:   36:	{
        2:   37:		if(G->hand[0][x] ==copper)
        -:   38:		{
        2:   39:			counterNew++;
        -:   40:		}
        2:   41:		if(G->hand[0][x] ==silver)
        -:   42:		{
    #####:   43:			counterNew++;
        -:   44:		}
        2:   45:		if(G->hand[0][x] ==gold)
        -:   46:		{
    #####:   47:			counterNew++;
        -:   48:		}
        -:   49:		
        -:   50:	}
        -:   51:	
        -:   52:	
        1:   53:	if(G->discardCount[0] != (newlyDiscarded+2))
        -:   54:		{
        1:   55:			printf("Error: Number of discarded cards does not equal what is expected.\n");
        -:   56:		}
    #####:   57:	else if(G->deckCount[0] != (newlyDiscarded + G->deckCount[0]))
        -:   58:	{
    #####:   59:			printf("Error: Deck count is not what is expected.\n");
        -:   60:	}
    #####:   61:	else if(counterNew != counter + 2)
        -:   62:	{
    #####:   63:			printf("Error: Did not find two extra treasure cards.\n");
        -:   64:	}
        -:   65:	else
        -:   66:		{
    #####:   67:			printf("Past Check Changes Test.\n");
        -:   68:		}
        -:   69:			//printf("Hand count should Be: %d and is %d.\n",G->handCount[0],testG->handCount[0]+3);
        -:   70:			//printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys+1);
        1:   71:}
        -:   72:
        1:   73:int main(){
        -:   74:	struct gameState G, testG;
        1:   75:	int numberOfPlayers = 2;
        1:   76:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   77:               , remodel, smithy, village, baron, great_hall};
        1:   78:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   79:	int seed = 9380;
        -:   80:
        1:   81:	printf("Testing adventurer.\n");
        1:   82:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   83:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   84:
        1:   85:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   86:	changeCheck(&G,&testG);
        -:   87:
        -:   88:
        1:   89:	return 0 ;
        -:   90:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
        1:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
        5:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
        4:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
        1:   79:  discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
        1:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
        4:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
        2:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
        2:   89:    drawCard(currentPlayer, state);
        2:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
        2:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
        1:  103:}
        -:  104:
      150:  105:int compare(const void* a, const void* b) {
      150:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
      150:  108:  if (*(int*)a < *(int*)b)
       40:  109:    return -1;
      110:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
        4:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
        4:  141:  SelectStream(1);
        4:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
        4:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
        4:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
       44:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
      440:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
      400:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
        4:  170:  if (numPlayers == 2)
        -:  171:    {
        3:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        1:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        1:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
        4:  184:  if (numPlayers == 2)
        -:  185:    {
        3:  186:      state->supplyCount[estate] = 8;
        3:  187:      state->supplyCount[duchy] = 8;
        3:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        1:  192:      state->supplyCount[estate] = 12;
        1:  193:      state->supplyCount[duchy] = 12;
        1:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
        4:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  199:  state->supplyCount[silver] = 40;
        4:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
       84:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
      660:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
      620:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
       40:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
       16:  212:		  if (numPlayers == 2){ 
        6:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        2:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
       32:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
       40:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
      580:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
       14:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
       10:  237:      state->deckCount[i] = 0;
       40:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       30:  240:	  state->deck[i][j] = estate;
       30:  241:	  state->deckCount[i]++;
        -:  242:	}
       80:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
       70:  245:	  state->deck[i][j] = copper;
       70:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
       14:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
       10:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
       14:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
       10:  263:      state->handCount[i] = 0;
       10:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
      112:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
      108:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
        4:  279:  state->outpostPlayed = 0;
        4:  280:  state->phase = 0;
        4:  281:  state->numActions = 1;
        4:  282:  state->numBuys = 1;
        4:  283:  state->playedCardCount = 0;
        4:  284:  state->whoseTurn = 0;
        4:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       24:  289:  for (it = 0; it < 5; it++){
       20:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
        4:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
        4:  295:  return 0;
        -:  296:}
        -:  297:
       10:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
       10:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
       10:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
       10:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
      120:  311:  while (state->deckCount[player] > 0) {
      100:  312:    card = floor(Random() * state->deckCount[player]);
      100:  313:    newDeck[newDeckPos] = state->deck[player][card];
      100:  314:    newDeckPos++;
      360:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      260:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
      100:  318:    state->deckCount[player]--;
        -:  319:  }
      110:  320:  for (i = 0; i < newDeckPos; i++) {
      100:  321:    state->deck[player][i] = newDeck[i];
      100:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
       10:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
    #####:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
    #####:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
    #####:  377:  who = state->whoseTurn;
        -:  378:
    #####:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
    #####:  381:      printf("You do not have any buys left\n");
    #####:  382:    return -1;
    #####:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
    #####:  385:      printf("There are not any of that type of card left\n");
    #####:  386:    return -1;
    #####:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
    #####:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  390:    return -1;
        -:  391:  } else {
    #####:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
    #####:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
    #####:  396:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
    #####:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
    #####:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
    #####:  417:int supplyCount(int card, struct gameState *state) {
    #####:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
        4:  443:int whoseTurn(struct gameState *state) {
        4:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
    #####:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
    #####:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
    #####:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
    #####:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
    #####:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
    #####:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
    #####:  467:  state->outpostPlayed = 0;
    #####:  468:  state->phase = 0;
    #####:  469:  state->numActions = 1;
    #####:  470:  state->coins = 0;
    #####:  471:  state->numBuys = 1;
    #####:  472:  state->playedCardCount = 0;
    #####:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
    #####:  477:  for (k = 0; k < 5; k++){
    #####:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
    #####:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
    #####:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       26:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       26:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       26:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       26:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       26:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       26:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       26:  673:    state->deckCount[player]--;
       26:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       26:  677:  return 0;
        -:  678:}
        -:  679:
    #####:  680:int getCost(int cardNumber)
        -:  681:{
    #####:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
    #####:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        4:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        4:  750:  int currentPlayer = whoseTurn(state);
        4:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        4:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        4:  756:  temphandP = &temphand;
        4:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        4:  759:  int z = 0;// this is the counter for the temp hand
        4:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        4:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
        1:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
        1:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
        1:  915:      newSmithy(currentPlayer, state, handPos);
        1:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        2: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        2: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        2: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        2: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        2: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        2: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        2: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        2: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        2: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
        4: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        4: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       24: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       20: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       16: 1352:	  state->coins += 1;
        -: 1353:	}
        4: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
        4: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        4: 1365:  state->coins += bonus;
        -: 1366:
        4: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing buyCard when not enough coins exists for user attempting buy.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Entering buyCard...
You do not have enough money to buy that. You have 0 coins.
Past Check Changes Test.
Coins should Be: 0 and is 0.
Number of Buys should Be: 1 and is 1.
Supply Count should Be: 8 and is 8.

Testing buyCard when not enough buys exists for user attempting buy.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Entering buyCard...
You do not have any buys left
Past Check Changes Test.
Coins should Be: 5 and is 5.
Number of Buys should Be: 0 and is 0.
Supply Count should Be: 8 and is 8.

Testing buyCard when not enough cards exists in buy pile for user attempting buy.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Entering buyCard...
There are not any of that type of card left
Past Check Changes Test.
Coins should Be: 5 and is 5.
Number of Buys should Be: 1 and is 1.
Supply Count should Be: 8 and is 8.

Testing buyCard changes correct gamestate data after buy.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Entering buyCard...
You bought card number 8 for 5 coins. You now have 0 buys and 0 coins.
Past Check Changes Test.
Coins should Be: 0 and is 0.
Number of Buys should Be: 0 and is 0.
Supply Count should Be: 9 and is 9.

Testing buyCard when selecting a card that is not part of the kingdom cards.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Entering buyCard...
There are not any of that type of card left
Past Check Changes Test.
Coins should Be: 5 and is 5.
Number of Buys should Be: 1 and is 1.
Supply Count should Be: 8 and is 8.

File 'unittest1.c'
Lines executed:89.83% of 59
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:31.44% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        4:    9:void changeCheck(int card, struct gameState *G, struct gameState *testG)
        -:   10:{
        4:   11:	if(G->coins != testG->coins)
        -:   12:		{
    #####:   13:			printf("Error: Number of Coins has changed.\n");
        -:   14:		}
        4:   15:	else if(G->numBuys != testG->numBuys)
        -:   16:		{
    #####:   17:			printf("Error: Number of Buys is different.\n");
        -:   18:		}
        4:   19:	else if(G->supplyCount[card] != testG->supplyCount[card])
        -:   20:		{
    #####:   21:			printf("Error: Number of cards in draw pile changed.\n");
        -:   22:		}
        -:   23:	else
        -:   24:		{
        4:   25:			printf("Past Check Changes Test.\n");
        -:   26:		}
        4:   27:			printf("Coins should Be: %d and is %d.\n",G->coins,testG->coins);
        4:   28:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys);
        4:   29:			printf("Supply Count should Be: %d and is %d.\n\n",G->supplyCount[card],testG->supplyCount[card]);
        4:   30:}
        -:   31:
        1:   32:void checkDeductions(int card, struct gameState *G, struct gameState *testG)
        -:   33:{
        1:   34:	if(G->coins != (testG->coins-getCost(card)))
        -:   35:		{
    #####:   36:			printf("Error: Number of Coins has not been deducted.\n");
        -:   37:		}
        1:   38:	else if(G->numBuys != (testG->numBuys-1))
        -:   39:		{
    #####:   40:			printf("Error: Number of Buys has not been deducted.\n");
        -:   41:		}
        1:   42:	else if(G->supplyCount[card] != (testG->supplyCount[card]-1))
        -:   43:		{
    #####:   44:			printf("Error: Number of cards is different.\n");
        -:   45:		}
        -:   46:	else
        -:   47:		{
        1:   48:			printf("Past Check Changes Test.\n");
        -:   49:		}
        1:   50:			printf("Coins should Be: %d and is %d.\n",G->coins,(testG->coins-getCost(card)));
        1:   51:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys, (testG->numBuys-1));
        1:   52:			printf("Supply Count should Be: %d and is %d.\n\n",G->supplyCount[card], (testG->supplyCount[card]-1));
        1:   53:}
        -:   54:
        1:   55:int main(){
        -:   56:	struct gameState G, testG;
        1:   57:	int numberOfPlayers = 2;
        1:   58:	int kards[10]={adventurer, council_room, feast, gardens, mine
        -:   59:               , remodel, smithy, village, baron, great_hall};
        1:   60:	int seed = 45;
        -:   61:
        -:   62:/* Testing buyCard when not enough coins exists for user attempting buy.*/
        1:   63:	printf("Testing buyCard when not enough coins exists for user attempting buy.\n");
        1:   64:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   65:	G.coins = 0;
        1:   66:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   67:	buyCard(council_room,&G);
        1:   68:	changeCheck(1,&G,&testG);
        -:   69:
        -:   70:/* Testing buyCard when not enough buys exists for user attempting buy.*/
        1:   71:	printf("Testing buyCard when not enough buys exists for user attempting buy.\n");
        1:   72:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   73:	G.numBuys = 0;
        1:   74:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   75:	buyCard(council_room,&G);
        1:   76:	changeCheck(1,&G,&testG);
        -:   77:
        -:   78:/* Testing buyCard when not enough cards in the buy pile exists for user attempting buy.*/
        1:   79:	printf("Testing buyCard when not enough cards exists in buy pile for user attempting buy.\n");
        1:   80:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   81:	G.supplyCount[council_room] = 0;
        1:   82:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   83:	buyCard(council_room,&G);
        1:   84:	changeCheck(1,&G,&testG);
        -:   85:
        -:   86:/* Testing buyCard changes correct gamestate data after buy.*/
        1:   87:	printf("Testing buyCard changes correct gamestate data after buy.\n");
        1:   88:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   89:	G.coins = 5;
        1:   90:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   91:	buyCard(council_room,&G);
        1:   92:	checkDeductions(council_room,&G,&testG);
        -:   93:
        -:   94:/* Testing buyCard when selecting a card that is not part of the kingdom cards.*/ 
        1:   95:	printf("Testing buyCard when selecting a card that is not part of the kingdom cards.\n");
        1:   96:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   97:	G.coins = 5;
        1:   98:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   99:	buyCard(embargo,&G);
        1:  100:	changeCheck(1,&G,&testG);
        1:  101:	return 0 ;
        -:  102:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
        1:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
        5:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
        4:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
        1:   79:  discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
        1:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
        4:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
        2:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
        2:   89:    drawCard(currentPlayer, state);
        2:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
        2:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
        1:  103:}
        -:  104:
      300:  105:int compare(const void* a, const void* b) {
      300:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
      300:  108:  if (*(int*)a < *(int*)b)
       80:  109:    return -1;
      220:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
        9:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
        9:  141:  SelectStream(1);
        9:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
        9:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
        9:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
       99:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
      990:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
      900:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
        9:  170:  if (numPlayers == 2)
        -:  171:    {
        8:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        1:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        1:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
        9:  184:  if (numPlayers == 2)
        -:  185:    {
        8:  186:      state->supplyCount[estate] = 8;
        8:  187:      state->supplyCount[duchy] = 8;
        8:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        1:  192:      state->supplyCount[estate] = 12;
        1:  193:      state->supplyCount[duchy] = 12;
        1:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
        9:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  199:  state->supplyCount[silver] = 40;
        9:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
      189:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
     1485:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
     1395:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
       90:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
       36:  212:		  if (numPlayers == 2){ 
       16:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        2:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
       72:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
       90:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
     1305:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
       29:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
       20:  237:      state->deckCount[i] = 0;
       80:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       60:  240:	  state->deck[i][j] = estate;
       60:  241:	  state->deckCount[i]++;
        -:  242:	}
      160:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
      140:  245:	  state->deck[i][j] = copper;
      140:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
       29:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
       20:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
       29:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
       20:  263:      state->handCount[i] = 0;
       20:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
      252:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
      243:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
        9:  279:  state->outpostPlayed = 0;
        9:  280:  state->phase = 0;
        9:  281:  state->numActions = 1;
        9:  282:  state->numBuys = 1;
        9:  283:  state->playedCardCount = 0;
        9:  284:  state->whoseTurn = 0;
        9:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       54:  289:  for (it = 0; it < 5; it++){
       45:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
        9:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
        9:  295:  return 0;
        -:  296:}
        -:  297:
       20:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
       20:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
       20:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
       20:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
      240:  311:  while (state->deckCount[player] > 0) {
      200:  312:    card = floor(Random() * state->deckCount[player]);
      200:  313:    newDeck[newDeckPos] = state->deck[player][card];
      200:  314:    newDeckPos++;
      775:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      575:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
      200:  318:    state->deckCount[player]--;
        -:  319:  }
      220:  320:  for (i = 0; i < newDeckPos; i++) {
      200:  321:    state->deck[player][i] = newDeck[i];
      200:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
       20:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
        5:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
        5:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
        5:  377:  who = state->whoseTurn;
        -:  378:
        5:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
        1:  381:      printf("You do not have any buys left\n");
        1:  382:    return -1;
        4:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
        2:  385:      printf("There are not any of that type of card left\n");
        2:  386:    return -1;
        2:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
        1:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  390:    return -1;
        -:  391:  } else {
        1:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
        1:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
        1:  396:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
        1:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
        1:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
        5:  417:int supplyCount(int card, struct gameState *state) {
        5:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
        4:  443:int whoseTurn(struct gameState *state) {
        4:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
    #####:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
    #####:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
    #####:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
    #####:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
    #####:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
    #####:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
    #####:  467:  state->outpostPlayed = 0;
    #####:  468:  state->phase = 0;
    #####:  469:  state->numActions = 1;
    #####:  470:  state->coins = 0;
    #####:  471:  state->numBuys = 1;
    #####:  472:  state->playedCardCount = 0;
    #####:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
    #####:  477:  for (k = 0; k < 5; k++){
    #####:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
    #####:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
    #####:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       51:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       51:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       51:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       51:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       51:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       51:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       51:  673:    state->deckCount[player]--;
       51:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       51:  677:  return 0;
        -:  678:}
        -:  679:
        6:  680:int getCost(int cardNumber)
        -:  681:{
        6:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
        6:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        4:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        4:  750:  int currentPlayer = whoseTurn(state);
        4:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        4:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        4:  756:  temphandP = &temphand;
        4:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        4:  759:  int z = 0;// this is the counter for the temp hand
        4:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        4:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
        1:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
        1:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
        1:  915:      newSmithy(currentPlayer, state, handPos);
        1:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        2: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        2: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        2: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        2: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        2: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        2: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        2: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        2: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        2: 1300:  return 0;
        -: 1301:}
        -: 1302:
        1: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        1: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
        1: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        1: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        1: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        1: 1337:  return 0;
        -: 1338:}
        -: 1339:
        9: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        9: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       54: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       45: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       41: 1352:	  state->coins += 1;
        -: 1353:	}
        4: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
        4: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        9: 1365:  state->coins += bonus;
        -: 1366:
        9: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing endTurn after initilizaing game and first player turn ends.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
hands will be 24
hands will be 8
hands will be 9
hands will be 10
hands will be 11
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Past Check Changes Test.
Whose turn it is 1 and was 0.
Number of coins changed from preset 100 for the former player to 4 for the new player.
Number of buys changed from preset 199 for the former player to 1 for the new player.
Number of actions changed from preset 200 for the former player to 1 for the new player.
Former players handcount went from 5 to 0.
Current players handcount went from 0 to 5.
Number of discarded cards for previous player was 0 and now is 5.
The Former player's hand included card 24 and is now -1.
The Former player's hand included card 8 and is now -1.
The Former player's hand included card 9 and is now -1.
The Former player's hand included card 10 and is now -1.
The Former player's hand included card 11 and is now -1.
Testing endTurn after initilizaing game and last player turn ends.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
hands will be 24
hands will be 8
hands will be 9
hands will be 10
hands will be 11
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Past Check Changes Test.
Whose turn it is 0 and was 1.
Number of coins changed from preset 100 for the former player to 2 for the new player.
Number of buys changed from preset 199 for the former player to 1 for the new player.
Number of actions changed from preset 200 for the former player to 1 for the new player.
Former players handcount went from 5 to 0.
Current players handcount went from 0 to 5.
Number of discarded cards for previous player was 0 and now is 5.
The Former player's hand included card 24 and is now -1.
The Former player's hand included card 8 and is now -1.
The Former player's hand included card 9 and is now -1.
The Former player's hand included card 10 and is now -1.
The Former player's hand included card 11 and is now -1.
File 'unittest2.c'
Lines executed:86.76% of 68
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:34.88% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest2.c endTurn
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:void changeCheck(int player, int playerFormer, struct gameState *G, struct gameState *oldG)
        -:   13:{
        2:   14:	int handStaySame = 0;
        2:   15:	int x =0;
       12:   16:	for(;x<oldG->handCount[playerFormer];x++)
        -:   17:	{
       10:   18:		if(oldG->hand[playerFormer][x] == G->hand[playerFormer][x])
        -:   19:		{
    #####:   20:			handStaySame++;
        -:   21:		}			
        -:   22:	}
        2:   23:	x=0;
        -:   24:
        2:   25:	if(G->whoseTurn == playerFormer)
        -:   26:		{
    #####:   27:			printf("Error: Player has not changed. \n");
        -:   28:		}
        2:   29:	else if(G->coins == oldG->coins)
        -:   30:		{
    #####:   31:			printf("Error: Number of coins is not different.\n");
        -:   32:		}
        2:   33:	else if(G->discardCount[playerFormer] <= oldG->discardCount[playerFormer])
        -:   34:		{
    #####:   35:			printf("Error: Number of discarded cards for the former player %d, has not increased.\n",G->discardCount[player]);
        -:   36:		}
        2:   37:	else if(G->numActions != 1)
        -:   38:		{
    #####:   39:			printf("Error: The number of buys is not the standard 1 at the beginning of a turn and is %d.\n",G->numActions);
        -:   40:		}
        2:   41:	else if(G->numBuys != 1)
        -:   42:		{
    #####:   43:			printf("Error: The number of buys is not the standard 1 at the beginning of a turn and is %d.\n",G->numBuys);
        -:   44:		}
        2:   45:	else if(oldG->hand[playerFormer][0]==G->hand[playerFormer][0])
        -:   46:		{
    #####:   47:			printf("Error: The former player's first card in their hand still exists.\n");
        -:   48:		}
        2:   49:	else if(oldG->handCount[playerFormer] <= G->handCount[playerFormer])
        -:   50:		{
    #####:   51:			printf("Error: The hand count for the former player has not decreased.\n");
        -:   52:		}
        2:   53:	else if(handStaySame >0)
        -:   54:		{
    #####:   55:			printf("Error: The hand for the former player has not changed for %d cards\n",handStaySame);
        -:   56:		}
        -:   57:else
        -:   58:		{
        2:   59:			printf("Past Check Changes Test.\n");
        -:   60:		}
        -:   61:
        2:   62:			printf("Whose turn it is %d and was %d.\n",G->whoseTurn,oldG->whoseTurn);
        2:   63:			printf("Number of coins changed from preset %d for the former player to %d for the new player.\n",oldG->coins, G->coins);
        2:   64:			printf("Number of buys changed from preset %d for the former player to %d for the new player.\n",oldG->numBuys, G->numBuys); 
        2:   65:			printf("Number of actions changed from preset %d for the former player to %d for the new player.\n",oldG->numActions, G->numActions); 
        2:   66:					printf("Former players handcount went from %d to %d.\n", oldG->handCount[playerFormer], G->handCount[playerFormer]); 
        2:   67:			printf("Current players handcount went from %d to %d.\n", oldG->handCount[player], G->handCount[player]); 
        2:   68:			printf("Number of discarded cards for previous player was %d and now is %d.\n",oldG->discardCount[playerFormer],G->discardCount[playerFormer]);
       12:   69:			for(;x<oldG->handCount[playerFormer];x++)
        -:   70:			{
       10:   71:			printf("The Former player's hand included card %d and is now %d.\n",oldG->hand[playerFormer][x],G->hand[playerFormer][x]);
        -:   72:			}
        2:   73:}
        -:   74:
        -:   75:
        1:   76:int main(){
        -:   77:	struct gameState G, oldG;
        1:   78:	int numberOfPlayers = 2;
        -:   79:	int currentPlayer, previousPlayer;
        1:   80:	int kards[10]={ salvager,council_room, feast, gardens, mine
        -:   81:               , remodel, smithy, village, baron, great_hall};
        1:   82:	int seed = 45;
        1:   83:	int x=0;
        -:   84:
        -:   85:/* Testing endTurn when user is first player.*/
        1:   86:	printf("Testing endTurn after initilizaing game and first player turn ends.\n");
        1:   87:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   88:	G.coins=100;
        1:   89:	G.numBuys=199;
        1:   90:	G.numActions=200;
        6:   91:	for(;x<G.handCount[0];x++)
        -:   92:	{
        5:   93:		G.hand[0][x]=kards[x];
        5:   94:		printf("hands will be %d\n",G.hand[0][x]);
        -:   95:	}
        1:   96:	memcpy(&oldG, &G, sizeof(struct gameState));
        1:   97:	previousPlayer = G.whoseTurn;
        1:   98:	endTurn(&G);
        1:   99:	currentPlayer = G.whoseTurn;
        1:  100:	changeCheck(currentPlayer, previousPlayer, &G,&oldG);
        -:  101:
        -:  102:/* Testing endTurn when user is last player.*/
        1:  103:	x=0;
        1:  104:	printf("Testing endTurn after initilizaing game and last player turn ends.\n");
        1:  105:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:  106:	endTurn(&G);	
        1:  107:	G.coins=100;
        1:  108:	G.numBuys=199;
        1:  109:	G.numActions=200;
        6:  110:	for(;x<G.handCount[1];x++)
        -:  111:	{
        5:  112:		G.hand[1][x]=kards[x];
        5:  113:		printf("hands will be %d\n",G.hand[1][x]);
        -:  114:	}
        1:  115:	memcpy(&oldG, &G, sizeof(struct gameState));
        1:  116:	previousPlayer = G.whoseTurn;
        1:  117:	endTurn(&G);
        1:  118:	currentPlayer = G.whoseTurn;
        1:  119:	changeCheck(currentPlayer, previousPlayer, &G,&oldG);
        -:  120:
        1:  121:	return 0;
        -:  122:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
        1:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
        5:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
        4:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
        1:   79:  discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
        1:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
        4:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
        2:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
        2:   89:    drawCard(currentPlayer, state);
        2:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
        2:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
        1:  103:}
        -:  104:
      360:  105:int compare(const void* a, const void* b) {
      360:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
      360:  108:  if (*(int*)a < *(int*)b)
       96:  109:    return -1;
      264:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
       11:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
       11:  141:  SelectStream(1);
       11:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
       11:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
       11:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
      121:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
     1210:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
     1100:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
       11:  170:  if (numPlayers == 2)
        -:  171:    {
       10:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        1:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        1:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
       11:  184:  if (numPlayers == 2)
        -:  185:    {
       10:  186:      state->supplyCount[estate] = 8;
       10:  187:      state->supplyCount[duchy] = 8;
       10:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        1:  192:      state->supplyCount[estate] = 12;
        1:  193:      state->supplyCount[duchy] = 12;
        1:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
       11:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  199:  state->supplyCount[silver] = 40;
       11:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
      231:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
     1815:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
     1705:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
      110:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
       44:  212:		  if (numPlayers == 2){ 
       20:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        2:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
       88:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
      110:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
     1595:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
       35:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
       24:  237:      state->deckCount[i] = 0;
       96:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       72:  240:	  state->deck[i][j] = estate;
       72:  241:	  state->deckCount[i]++;
        -:  242:	}
      192:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
      168:  245:	  state->deck[i][j] = copper;
      168:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
       35:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
       24:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
       35:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
       24:  263:      state->handCount[i] = 0;
       24:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
      308:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
      297:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
       11:  279:  state->outpostPlayed = 0;
       11:  280:  state->phase = 0;
       11:  281:  state->numActions = 1;
       11:  282:  state->numBuys = 1;
       11:  283:  state->playedCardCount = 0;
       11:  284:  state->whoseTurn = 0;
       11:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       66:  289:  for (it = 0; it < 5; it++){
       55:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
       11:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
       11:  295:  return 0;
        -:  296:}
        -:  297:
       24:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
       24:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
       24:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
       24:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
      288:  311:  while (state->deckCount[player] > 0) {
      240:  312:    card = floor(Random() * state->deckCount[player]);
      240:  313:    newDeck[newDeckPos] = state->deck[player][card];
      240:  314:    newDeckPos++;
      941:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      701:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
      240:  318:    state->deckCount[player]--;
        -:  319:  }
      264:  320:  for (i = 0; i < newDeckPos; i++) {
      240:  321:    state->deck[player][i] = newDeck[i];
      240:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
       24:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
        5:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
        5:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
        5:  377:  who = state->whoseTurn;
        -:  378:
        5:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
        1:  381:      printf("You do not have any buys left\n");
        1:  382:    return -1;
        4:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
        2:  385:      printf("There are not any of that type of card left\n");
        2:  386:    return -1;
        2:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
        1:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  390:    return -1;
        -:  391:  } else {
        1:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
        1:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
        1:  396:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
        1:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
        1:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
        5:  417:int supplyCount(int card, struct gameState *state) {
        5:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
        7:  443:int whoseTurn(struct gameState *state) {
        7:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
        3:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
        3:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
       18:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
        3:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
        3:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
        1:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
        3:  467:  state->outpostPlayed = 0;
        3:  468:  state->phase = 0;
        3:  469:  state->numActions = 1;
        3:  470:  state->coins = 0;
        3:  471:  state->numBuys = 1;
        3:  472:  state->playedCardCount = 0;
        3:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
       18:  477:  for (k = 0; k < 5; k++){
       15:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
        3:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
        3:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       76:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       76:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       76:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       76:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       76:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       76:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       76:  673:    state->deckCount[player]--;
       76:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       76:  677:  return 0;
        -:  678:}
        -:  679:
        6:  680:int getCost(int cardNumber)
        -:  681:{
        6:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
        6:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        4:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        4:  750:  int currentPlayer = whoseTurn(state);
        4:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        4:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        4:  756:  temphandP = &temphand;
        4:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        4:  759:  int z = 0;// this is the counter for the temp hand
        4:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        4:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
        1:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
        1:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
        1:  915:      newSmithy(currentPlayer, state, handPos);
        1:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        2: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        2: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        2: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        2: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        2: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        2: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        2: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        2: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        2: 1300:  return 0;
        -: 1301:}
        -: 1302:
        1: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        1: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
        1: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        1: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        1: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        1: 1337:  return 0;
        -: 1338:}
        -: 1339:
       14: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
       14: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       84: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       70: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       61: 1352:	  state->coins += 1;
        -: 1353:	}
        9: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
        9: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
       14: 1365:  state->coins += bonus;
        -: 1366:
       14: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing whoseTurn by changing gamestate manually and comparing expected and actual data.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Past Check Changes Test when player is 0.
Current player should be: 0 and is 0.
Past Check Changes Test when player is 1.
Current player should be: 1 and is 1.
Past Check Changes Test when player is 2.
Current player should be: 2 and is 2.
Past Check Changes Test when player is 3.
Current player should be: 3 and is 3.
File 'unittest3.c'
Lines executed:94.12% of 17
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:34.88% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest3.c whoseTurn
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        4:   12:void changeCheck(int expectedValue, struct gameState *G)
        -:   13:{
        4:   14:	if(expectedValue != whoseTurn(G))
        -:   15:		{
    #####:   16:			printf("Error: Number of whoseTurn does not return value that matches expected value.\n");
        -:   17:		}
        -:   18:	else
        -:   19:		{
        4:   20:			printf("Past Check Changes Test when player is %d.\n", G->whoseTurn);
        -:   21:		}
        4:   22:			printf("Current player should be: %d and is %d.\n",expectedValue,whoseTurn(G));
        4:   23:}
        -:   24:
        1:   25:int main(){
        -:   26:	struct gameState G;
        1:   27:	int numberOfPlayers = 4;
        1:   28:	int kards[10]={adventurer, council_room, feast, gardens, mine
        -:   29:               , remodel, smithy, village, baron, great_hall};
        1:   30:	int seed = 234;
        1:   31:	int x = 0;
        -:   32:	
        -:   33:/* Testing whoseTurn when not enough coins exists for user attempting buy.*/
        1:   34:	printf("Testing whoseTurn by changing gamestate manually and comparing expected and actual data.\n");
        1:   35:	initializeGame(numberOfPlayers, kards, seed, &G);
        -:   36:	//G.coins = 0;
        -:   37:	//memcpy(&testG, &G, sizeof(struct gameState));
        5:   38:	for(;x<numberOfPlayers;x++)
        -:   39:	{
        4:   40:		G.whoseTurn = x;
        4:   41:		changeCheck(x,&G);
        -:   42:	}
        -:   43:	
        1:   44:	return 0;
        -:   45:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
        1:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
        5:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
        4:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
        1:   79:  discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
        1:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
        4:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
        2:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
        2:   89:    drawCard(currentPlayer, state);
        2:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
        2:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
        1:  103:}
        -:  104:
      420:  105:int compare(const void* a, const void* b) {
      420:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
      420:  108:  if (*(int*)a < *(int*)b)
      112:  109:    return -1;
      308:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
       12:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
       12:  141:  SelectStream(1);
       12:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
       12:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
       12:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
      132:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
     1320:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
     1200:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
       12:  170:  if (numPlayers == 2)
        -:  171:    {
       10:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        2:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        2:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
       12:  184:  if (numPlayers == 2)
        -:  185:    {
       10:  186:      state->supplyCount[estate] = 8;
       10:  187:      state->supplyCount[duchy] = 8;
       10:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        2:  192:      state->supplyCount[estate] = 12;
        2:  193:      state->supplyCount[duchy] = 12;
        2:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
       12:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  199:  state->supplyCount[silver] = 40;
       12:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
      252:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
     1980:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
     1860:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
      120:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
       48:  212:		  if (numPlayers == 2){ 
       20:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        4:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
       96:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
      120:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
     1740:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
       40:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
       28:  237:      state->deckCount[i] = 0;
      112:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       84:  240:	  state->deck[i][j] = estate;
       84:  241:	  state->deckCount[i]++;
        -:  242:	}
      224:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
      196:  245:	  state->deck[i][j] = copper;
      196:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
       40:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
       28:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
       40:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
       28:  263:      state->handCount[i] = 0;
       28:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
      336:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
      324:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
       12:  279:  state->outpostPlayed = 0;
       12:  280:  state->phase = 0;
       12:  281:  state->numActions = 1;
       12:  282:  state->numBuys = 1;
       12:  283:  state->playedCardCount = 0;
       12:  284:  state->whoseTurn = 0;
       12:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       72:  289:  for (it = 0; it < 5; it++){
       60:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
       12:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
       12:  295:  return 0;
        -:  296:}
        -:  297:
       28:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
       28:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
       28:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
       28:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
      336:  311:  while (state->deckCount[player] > 0) {
      280:  312:    card = floor(Random() * state->deckCount[player]);
      280:  313:    newDeck[newDeckPos] = state->deck[player][card];
      280:  314:    newDeckPos++;
     1068:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      788:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
      280:  318:    state->deckCount[player]--;
        -:  319:  }
      308:  320:  for (i = 0; i < newDeckPos; i++) {
      280:  321:    state->deck[player][i] = newDeck[i];
      280:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
       28:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
        5:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
        5:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
        5:  377:  who = state->whoseTurn;
        -:  378:
        5:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
        1:  381:      printf("You do not have any buys left\n");
        1:  382:    return -1;
        4:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
        2:  385:      printf("There are not any of that type of card left\n");
        2:  386:    return -1;
        2:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
        1:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  390:    return -1;
        -:  391:  } else {
        1:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
        1:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
        1:  396:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
        1:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
        1:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
        5:  417:int supplyCount(int card, struct gameState *state) {
        5:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
       15:  443:int whoseTurn(struct gameState *state) {
       15:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
        3:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
        3:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
       18:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
        3:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
        3:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
        1:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
        3:  467:  state->outpostPlayed = 0;
        3:  468:  state->phase = 0;
        3:  469:  state->numActions = 1;
        3:  470:  state->coins = 0;
        3:  471:  state->numBuys = 1;
        3:  472:  state->playedCardCount = 0;
        3:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
       18:  477:  for (k = 0; k < 5; k++){
       15:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
        3:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
        3:  484:  return 0;
        -:  485:}
        -:  486:
    #####:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
    #####:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
    #####:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
    #####:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
    #####:  503:	  j++;
        -:  504:	}
        -:  505:    }
    #####:  506:  if ( j >= 3)
        -:  507:    {
    #####:  508:      return 1;
        -:  509:    }
        -:  510:
    #####:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       81:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       81:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       81:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       81:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       81:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       81:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       81:  673:    state->deckCount[player]--;
       81:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       81:  677:  return 0;
        -:  678:}
        -:  679:
        6:  680:int getCost(int cardNumber)
        -:  681:{
        6:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
        6:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        4:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        4:  750:  int currentPlayer = whoseTurn(state);
        4:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        4:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        4:  756:  temphandP = &temphand;
        4:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        4:  759:  int z = 0;// this is the counter for the temp hand
        4:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        4:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
        1:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
        1:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
        1:  915:      newSmithy(currentPlayer, state, handPos);
        1:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        2: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        2: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        2: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        2: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        2: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        2: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        2: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        2: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        2: 1300:  return 0;
        -: 1301:}
        -: 1302:
        1: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        1: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
        1: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        1: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        1: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        1: 1337:  return 0;
        -: 1338:}
        -: 1339:
       15: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
       15: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       90: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       75: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       64: 1352:	  state->coins += 1;
        -: 1353:	}
       11: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
       11: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
       15: 1365:  state->coins += bonus;
        -: 1366:
       15: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing isGameOver when province pile is empty.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Past Test.
Province pile has 0 cards.
The number of depleted card piles is 0. 
Testing isGameOver when  one to all of the following are card piles are empty: feast, gardens and baron.
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Past Test.
Province pile has 8 cards.
The number of depleted card piles is 0. 
Past Test.
Province pile has 8 cards.
The number of depleted card piles is 1. 
Past Test.
Province pile has 8 cards.
The number of depleted card piles is 2. 

The function isGameOver recognizes when three card piles are empty.
Province pile has 8 cards.
The number of depleted card piles is 3. 
File 'unittest4.c'
Lines executed:88.89% of 45
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:36.60% of 582
Creating 'dominion.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest4.c isGameOver
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        5:   12:void changeCheck(struct gameState *G, int testNumber, int kards[10])
        -:   13:{
        5:   14:	int x = 0;
        5:   15:	int depletion = 0;
        5:   16:	if(isGameOver(G)!=1&&testNumber==0)
        -:   17:		{
    #####:   18:			printf("Error: Does not recognize game is over when province pile is 0.\n");
        -:   19:		}
        5:   20:	else if(isGameOver(G)!=0&&testNumber==1)
        -:   21:		{
    #####:   22:			printf("Error: isGameOver states game is over when game is not over since no rule for game over is true.\n");
        -:   23:		}
        5:   24:	else if(isGameOver(G)!=0&&testNumber==2)
        -:   25:		{
    #####:   26:			printf("Error: isGameOver states game is over when game is not over since no rule for game over is true.\n");
        -:   27:		}
        5:   28:	else if(isGameOver(G)!=1&&testNumber==3)
        -:   29:		{
    #####:   30:			printf("Error: Does not recognize game is over when three card piles are completely depleted.\n");
        -:   31:		}
        5:   32:	else if(isGameOver(G)==1&&testNumber==3)
        -:   33:		{
        1:   34:			printf("\nThe function isGameOver recognizes when three card piles are empty.\n");
        -:   35:		}
        4:   36:	else if(isGameOver(G)!=0&&testNumber==4)
        -:   37:		{
    #####:   38:			printf("Error: isGameOver states game is over when game is NOT over since no rule for game over is true.\n");
        -:   39:		}					
        -:   40:	else
        -:   41:		{
        4:   42:			printf("Past Test.\n");
        -:   43:		}
        5:   44:	printf("Province pile has %d cards.\n", G->supplyCount[province]);
       55:   45:	for(; x<10;x++)
        -:   46:	{
       50:   47:		if(G->supplyCount[kards[x]]==0)
        -:   48:		{
        6:   49:			depletion++;
        -:   50:		}	
        -:   51:	}
        5:   52:	printf("The number of depleted card piles is %d. \n",depletion);	
        -:   53:
        5:   54:}
        -:   55:
        1:   56:int main(){
        -:   57:	struct gameState G;
        1:   58:	int numberOfPlayers = 2;
        1:   59:	int kards[10]={salvager, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   60:	int seed = 637;
        1:   61:	int testNumber=0;
        -:   62:
        -:   63:/* Testing isGameOver when province pile is 0.*/
        1:   64:	printf("Testing isGameOver when province pile is empty.\n");
        1:   65:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   66:	G.supplyCount[province]=0;
        1:   67:	changeCheck(&G, testNumber, kards);
        -:   68:	
        -:   69:/* Testing isGameOver when three card stacks are completely depleted.*/
        1:   70:	printf("Testing isGameOver when  one to all of the following are card piles are empty: feast, gardens and baron.\n");
        1:   71:	initializeGame(numberOfPlayers, kards, seed, &G);
        -:   72:	
        -:   73:	/* Testing isGameOver when no card pile is empty */
        1:   74:	testNumber = 4;
        1:   75:	changeCheck(&G, testNumber, kards);
        -:   76:	
        -:   77:	/* Testing isGameOver when one card pile is empty */
        1:   78:	G.supplyCount[feast]=0;
        1:   79:	testNumber = 1;
        1:   80:	changeCheck(&G, testNumber, kards);
        -:   81:	
        -:   82:	/* Testing isGameOver when two card piles is empty */
        1:   83:	G.supplyCount[gardens]=0;
        1:   84:	testNumber = 2;
        1:   85:	changeCheck(&G, testNumber, kards);	
        -:   86:	
        -:   87:	/* Testing isGameOver when three card piles is empty */	
        1:   88:	G.supplyCount[baron]=0;
        1:   89:	testNumber = 3;
        1:   90:	changeCheck(&G, testNumber, kards);
        -:   91:
        1:   92:	return 0;
        -:   93:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:void newSalvager(int currentPlayer, struct gameState * state, int handPos, int choice1)
        -:    9:{
        -:   10:    //+1 buy
        1:   11:    state->numBuys++;
        -:   12:
        1:   13:    if (choice1)
        -:   14:    {
        -:   15:        //Two bugs in the following line of code. The first is that the element coins in the struct gameState state
        -:   16:        //is not changed by adding the cost of a discarded card to coins but instead coins is redefined as the cost of that card.
    #####:   17:        state->coins =  getCost( handCard(choice1, state) );
        -:   18:        //trash card
    #####:   19:        discardCard(choice1, currentPlayer, state, 1);
        -:   20:    }
        -:   21:
        -:   22:    //discard card
        1:   23:    discardCard(handPos, currentPlayer, state, 0);
        1:   24:}
        -:   25:
        1:   26:void newSeaHag(int currentPlayer, struct gameState * state)
        -:   27:{
        -:   28:    int i;
        5:   29:    for (i = 0; i < state->numPlayers; i++){
        4:   30:        if (i != currentPlayer){
        3:   31:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:   32:            //Bug I removed the decrement of the deckCount element from the struct gameState pointer state
        -:   33:            //state->deckCount[i]--;
        3:   34:            state->discardCount[i]++;
        -:   35:            //When the the program reaches to this line of code the curse will not be assigned to the
        -:   36:            //the top card instead it will be assigned to the following element which will be overwritten the next
        -:   37:            //time the program utilizes deckCount.
        3:   38:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
    #####:   43:void newSteward(int currentPlayer, struct gameState * state, int handPos, int choice1, int choice2, int choice3)
        -:   44:{
    #####:   45:    if (choice1 == 1)
        -:   46:    {
        -:   47:        //+2 cards
    #####:   48:        drawCard(currentPlayer, state);
    #####:   49:        drawCard(currentPlayer, state);
        -:   50:    }
    #####:   51:    else if (choice1 == 2)
        -:   52:    {
        -:   53:        //+2 coins
    #####:   54:        state->coins = state->coins + 2;
        -:   55:    }
        -:   56:    else
        -:   57:    {
        -:   58:        //trash 2 cards in hand
    #####:   59:        discardCard(choice2, currentPlayer, state, 1);
    #####:   60:        discardCard(choice3, currentPlayer, state, 1);
        -:   61:    }
        -:   62:
        -:   63:    //discard card from hand
    #####:   64:    discardCard(handPos, currentPlayer, state, 0);
        -:   65:
    #####:   66:}
        -:   67:
        1:   68:void newSmithy(int currentPlayer, struct gameState * state, int handPos)
        -:   69:{
        -:   70:  int i;
        -:   71:  //+3 Cards
        -:   72:    //The bug is that the for loop beneath this comment should be < 3 not <=3.
        5:   73:  for (i = 0; i <= 3; i++)
        -:   74:  {
        4:   75:    drawCard(currentPlayer, state);
        -:   76:  }
        -:   77:
        -:   78:  //discard card from hand
        1:   79:  discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
        1:   82:void newAdventurer(int drawntreasure, struct gameState * state,int currentPlayer,int cardDrawn,int z, int *temphand)
        -:   83:{
        4:   84:  while(drawntreasure<2){
        -:   85:      //bug is  that the if statement below should be based on less than 1 not less than 0 (<1 vs <0).
        2:   86:    if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
    #####:   87:      shuffle(currentPlayer, state);
        -:   88:    }
        2:   89:    drawCard(currentPlayer, state);
        2:   90:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:   91:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   92:      drawntreasure++;
        -:   93:    else{
    #####:   94:      temphand[z]=cardDrawn;
    #####:   95:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   96:      z++;
        -:   97:    }
        -:   98:  }
        2:   99:  while(z-1>=0){
    #####:  100:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  101:    z=z-1;
        -:  102:  }
        1:  103:}
        -:  104:
      480:  105:int compare(const void* a, const void* b) {
      480:  106:  if (*(int*)a > *(int*)b)
    #####:  107:    return 1;
      480:  108:  if (*(int*)a < *(int*)b)
      128:  109:    return -1;
      352:  110:  return 0;
        -:  111:}
        -:  112:
    #####:  113:struct gameState* newGame() {
    #####:  114:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  115:  return g;
        -:  116:}
        -:  117:
    #####:  118:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  119:		  int k8, int k9, int k10) {
    #####:  120:  int* k = malloc(10 * sizeof(int));
    #####:  121:  k[0] = k1;
    #####:  122:  k[1] = k2;
    #####:  123:  k[2] = k3;
    #####:  124:  k[3] = k4;
    #####:  125:  k[4] = k5;
    #####:  126:  k[5] = k6;
    #####:  127:  k[6] = k7;
    #####:  128:  k[7] = k8;
    #####:  129:  k[8] = k9;
    #####:  130:  k[9] = k10;
    #####:  131:  return k;
        -:  132:}
        -:  133:
       14:  134:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  135:		   struct gameState *state) {
        -:  136:
        -:  137:  int i;
        -:  138:  int j;
        -:  139:  int it;			
        -:  140:  //set up random number generator
       14:  141:  SelectStream(1);
       14:  142:  PutSeed((long)randomSeed);
        -:  143:  
        -:  144:  //check number of players
       14:  145:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  146:    {
    #####:  147:      return -1;
        -:  148:    }
        -:  149:
        -:  150:  //set number of players
       14:  151:  state->numPlayers = numPlayers;
        -:  152:
        -:  153:  //check selected kingdom cards are different
      154:  154:  for (i = 0; i < 10; i++)
        -:  155:    {
     1540:  156:      for (j = 0; j < 10; j++)
        -:  157:        {
     1400:  158:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  159:	    {
    #####:  160:	      return -1;
        -:  161:	    }
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:
        -:  166:  //initialize supply
        -:  167:  ///////////////////////////////
        -:  168:
        -:  169:  //set number of Curse cards
       14:  170:  if (numPlayers == 2)
        -:  171:    {
       12:  172:      state->supplyCount[curse] = 10;
        -:  173:    }
        2:  174:  else if (numPlayers == 3)
        -:  175:    {
    #####:  176:      state->supplyCount[curse] = 20;
        -:  177:    }
        -:  178:  else
        -:  179:    {
        2:  180:      state->supplyCount[curse] = 30;
        -:  181:    }
        -:  182:
        -:  183:  //set number of Victory cards
       14:  184:  if (numPlayers == 2)
        -:  185:    {
       12:  186:      state->supplyCount[estate] = 8;
       12:  187:      state->supplyCount[duchy] = 8;
       12:  188:      state->supplyCount[province] = 8;
        -:  189:    }
        -:  190:  else
        -:  191:    {
        2:  192:      state->supplyCount[estate] = 12;
        2:  193:      state->supplyCount[duchy] = 12;
        2:  194:      state->supplyCount[province] = 12;
        -:  195:    }
        -:  196:
        -:  197:  //set number of Treasure cards
       14:  198:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  199:  state->supplyCount[silver] = 40;
       14:  200:  state->supplyCount[gold] = 30;
        -:  201:
        -:  202:  //set number of Kingdom cards
      294:  203:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  204:    {
     2310:  205:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  206:	{
     2170:  207:	  if (kingdomCards[j] == i)
        -:  208:	    {
        -:  209:	      //check if card is a 'Victory' Kingdom card
      140:  210:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  211:		{
       56:  212:		  if (numPlayers == 2){ 
       24:  213:		    state->supplyCount[i] = 8; 
        -:  214:		  }
        4:  215:		  else{ state->supplyCount[i] = 12; }
        -:  216:		}
        -:  217:	      else
        -:  218:		{
      112:  219:		  state->supplyCount[i] = 10;
        -:  220:		}
      140:  221:	      break;
        -:  222:	    }
        -:  223:	  else    //card is not in the set choosen for the game
        -:  224:	    {
     2030:  225:	      state->supplyCount[i] = -1;
        -:  226:	    }
        -:  227:	}
        -:  228:
        -:  229:    }
        -:  230:
        -:  231:  ////////////////////////
        -:  232:  //supply intilization complete
        -:  233:
        -:  234:  //set player decks
       46:  235:  for (i = 0; i < numPlayers; i++)
        -:  236:    {
       32:  237:      state->deckCount[i] = 0;
      128:  238:      for (j = 0; j < 3; j++)
        -:  239:	{
       96:  240:	  state->deck[i][j] = estate;
       96:  241:	  state->deckCount[i]++;
        -:  242:	}
      256:  243:      for (j = 3; j < 10; j++)
        -:  244:	{
      224:  245:	  state->deck[i][j] = copper;
      224:  246:	  state->deckCount[i]++;		
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //shuffle player decks
       46:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
       32:  253:      if ( shuffle(i, state) < 0 )
        -:  254:	{
    #####:  255:	  return -1;
        -:  256:	}
        -:  257:    }
        -:  258:
        -:  259:  //draw player hands
       46:  260:  for (i = 0; i < numPlayers; i++)
        -:  261:    {  
        -:  262:      //initialize hand size to zero
       32:  263:      state->handCount[i] = 0;
       32:  264:      state->discardCount[i] = 0;
        -:  265:      //draw 5 cards
        -:  266:      // for (j = 0; j < 5; j++)
        -:  267:      //	{
        -:  268:      //	  drawCard(i, state);
        -:  269:      //	}
        -:  270:    }
        -:  271:  
        -:  272:  //set embargo tokens to 0 for all supply piles
      392:  273:  for (i = 0; i <= treasure_map; i++)
        -:  274:    {
      378:  275:      state->embargoTokens[i] = 0;
        -:  276:    }
        -:  277:
        -:  278:  //initialize first player's turn
       14:  279:  state->outpostPlayed = 0;
       14:  280:  state->phase = 0;
       14:  281:  state->numActions = 1;
       14:  282:  state->numBuys = 1;
       14:  283:  state->playedCardCount = 0;
       14:  284:  state->whoseTurn = 0;
       14:  285:  state->handCount[state->whoseTurn] = 0;
        -:  286:  //int it; move to top
        -:  287:
        -:  288:  //Moved draw cards to here, only drawing at the start of a turn
       84:  289:  for (it = 0; it < 5; it++){
       70:  290:    drawCard(state->whoseTurn, state);
        -:  291:  }
        -:  292:
       14:  293:  updateCoins(state->whoseTurn, state, 0);
        -:  294:
       14:  295:  return 0;
        -:  296:}
        -:  297:
       32:  298:int shuffle(int player, struct gameState *state) {
        -:  299: 
        -:  300:
        -:  301:  int newDeck[MAX_DECK];
       32:  302:  int newDeckPos = 0;
        -:  303:  int card;
        -:  304:  int i;
        -:  305:
       32:  306:  if (state->deckCount[player] < 1)
    #####:  307:    return -1;
       32:  308:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  309:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  310:
      384:  311:  while (state->deckCount[player] > 0) {
      320:  312:    card = floor(Random() * state->deckCount[player]);
      320:  313:    newDeck[newDeckPos] = state->deck[player][card];
      320:  314:    newDeckPos++;
     1204:  315:    for (i = card; i < state->deckCount[player]-1; i++) {
      884:  316:      state->deck[player][i] = state->deck[player][i+1];
        -:  317:    }
      320:  318:    state->deckCount[player]--;
        -:  319:  }
      352:  320:  for (i = 0; i < newDeckPos; i++) {
      320:  321:    state->deck[player][i] = newDeck[i];
      320:  322:    state->deckCount[player]++;
        -:  323:  }
        -:  324:
       32:  325:  return 0;
        -:  326:}
        -:  327:
    #####:  328:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  329:{	
        -:  330:  int card;
    #####:  331:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  332:
        -:  333:  //check if it is the right phase
    #####:  334:  if (state->phase != 0)
        -:  335:    {
    #####:  336:      return -1;
        -:  337:    }
        -:  338:	
        -:  339:  //check if player has enough actions
    #####:  340:  if ( state->numActions < 1 )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //get card played
    #####:  346:  card = handCard(handPos, state);
        -:  347:	
        -:  348:  //check if selected card is an action
    #####:  349:  if ( card < adventurer || card > treasure_map )
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //play card
    #####:  355:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //reduce number of actions
    #####:  361:  state->numActions--;
        -:  362:
        -:  363:  //update coins (Treasure cards may be added with card draws)
    #####:  364:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  365:	
    #####:  366:  return 0;
        -:  367:}
        -:  368:
        5:  369:int buyCard(int supplyPos, struct gameState *state) {
        -:  370:  int who;
        -:  371:  if (DEBUG){
        5:  372:    printf("Entering buyCard...\n");
        -:  373:  }
        -:  374:
        -:  375:  // I don't know what to do about the phase thing.
        -:  376:
        5:  377:  who = state->whoseTurn;
        -:  378:
        5:  379:  if (state->numBuys < 1){
        -:  380:    if (DEBUG)
        1:  381:      printf("You do not have any buys left\n");
        1:  382:    return -1;
        4:  383:  } else if (supplyCount(supplyPos, state) <1){
        -:  384:    if (DEBUG)
        2:  385:      printf("There are not any of that type of card left\n");
        2:  386:    return -1;
        2:  387:  } else if (state->coins < getCost(supplyPos)){
        -:  388:    if (DEBUG) 
        1:  389:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  390:    return -1;
        -:  391:  } else {
        1:  392:    state->phase=1;
        -:  393:    //state->supplyCount[supplyPos]--;
        1:  394:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  395:  
        1:  396:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  397:    state->numBuys--;
        -:  398:    if (DEBUG)
        1:  399:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  400:  }
        -:  401:
        -:  402:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  403:  //state->discardCount[who]++;
        -:  404:    
        1:  405:  return 0;
        -:  406:}
        -:  407:
    #####:  408:int numHandCards(struct gameState *state) {
    #####:  409:  return state->handCount[ whoseTurn(state) ];
        -:  410:}
        -:  411:
    #####:  412:int handCard(int handPos, struct gameState *state) {
    #####:  413:  int currentPlayer = whoseTurn(state);
    #####:  414:  return state->hand[currentPlayer][handPos];
        -:  415:}
        -:  416:
        5:  417:int supplyCount(int card, struct gameState *state) {
        5:  418:  return state->supplyCount[card];
        -:  419:}
        -:  420:
    #####:  421:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  422:  int i;
    #####:  423:  int count = 0;
        -:  424:
    #####:  425:  for (i = 0; i < state->deckCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->deck[player][i] == card) count++;
        -:  428:    }
        -:  429:
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == card) count++;
        -:  433:    }
        -:  434:
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == card) count++;
        -:  438:    }
        -:  439:
    #####:  440:  return count;
        -:  441:}
        -:  442:
       15:  443:int whoseTurn(struct gameState *state) {
       15:  444:  return state->whoseTurn;
        -:  445:}
        -:  446:
        3:  447:int endTurn(struct gameState *state) {
        -:  448:  int k;
        -:  449:  int i;
        3:  450:  int currentPlayer = whoseTurn(state);
        -:  451:  
        -:  452:  //Discard hand
       18:  453:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  454:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  455:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  456:  }
        3:  457:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  458:    
        -:  459:  //Code for determining the player
        3:  460:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  461:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  462:  }
        -:  463:  else{
        1:  464:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  465:  }
        -:  466:
        3:  467:  state->outpostPlayed = 0;
        3:  468:  state->phase = 0;
        3:  469:  state->numActions = 1;
        3:  470:  state->coins = 0;
        3:  471:  state->numBuys = 1;
        3:  472:  state->playedCardCount = 0;
        3:  473:  state->handCount[state->whoseTurn] = 0;
        -:  474:
        -:  475:  //int k; move to top
        -:  476:  //Next player draws hand
       18:  477:  for (k = 0; k < 5; k++){
       15:  478:    drawCard(state->whoseTurn, state);//Draw a card
        -:  479:  }
        -:  480:
        -:  481:  //Update money
        3:  482:  updateCoins(state->whoseTurn, state , 0);
        -:  483:
        3:  484:  return 0;
        -:  485:}
        -:  486:
       29:  487:int isGameOver(struct gameState *state) {
        -:  488:  int i;
        -:  489:  int j;
        -:  490:	
        -:  491:  //if stack of Province cards is empty, the game ends
       29:  492:  if (state->supplyCount[province] == 0)
        -:  493:    {
        6:  494:      return 1;
        -:  495:    }
        -:  496:
        -:  497:  //if three supply pile are at 0, the game ends
       23:  498:  j = 0;
      598:  499:  for (i = 0; i < 25; i++)
        -:  500:    {
      575:  501:      if (state->supplyCount[i] == 0)
        -:  502:	{
       33:  503:	  j++;
        -:  504:	}
        -:  505:    }
       23:  506:  if ( j >= 3)
        -:  507:    {
        5:  508:      return 1;
        -:  509:    }
        -:  510:
       18:  511:  return 0;
        -:  512:}
        -:  513:
    #####:  514:int scoreFor (int player, struct gameState *state) {
        -:  515:
        -:  516:  int i;
    #####:  517:  int score = 0;
        -:  518:  //score from hand
    #####:  519:  for (i = 0; i < state->handCount[player]; i++)
        -:  520:    {
    #####:  521:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  522:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  523:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  524:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  525:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  526:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  527:    }
        -:  528:
        -:  529:  //score from discard
    #####:  530:  for (i = 0; i < state->discardCount[player]; i++)
        -:  531:    {
    #####:  532:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  533:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  534:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  535:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  536:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  537:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  538:    }
        -:  539:
        -:  540:  //score from deck
    #####:  541:  for (i = 0; i < state->discardCount[player]; i++)
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  544:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  545:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  546:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  547:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  548:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  549:    }
        -:  550:
    #####:  551:  return score;
        -:  552:}
        -:  553:
    #####:  554:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  555:  int i;	
        -:  556:  int j;
        -:  557:  int highScore;
        -:  558:  int currentPlayer;
        -:  559:
        -:  560:  //get score for each player
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
        -:  563:      //set unused player scores to -9999
    #####:  564:      if (i >= state->numPlayers)
        -:  565:	{
    #####:  566:	  players[i] = -9999;
        -:  567:	}
        -:  568:      else
        -:  569:	{
    #####:  570:	  players[i] = scoreFor (i, state);
        -:  571:	}
        -:  572:    }
        -:  573:
        -:  574:  //find highest score
    #####:  575:  j = 0;
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
    #####:  578:      if (players[i] > players[j])
        -:  579:	{
    #####:  580:	  j = i;
        -:  581:	}
        -:  582:    }
    #####:  583:  highScore = players[j];
        -:  584:
        -:  585:  //add 1 to players who had less turns
    #####:  586:  currentPlayer = whoseTurn(state);
    #####:  587:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  588:    {
    #####:  589:      if ( players[i] == highScore && i > currentPlayer )
        -:  590:	{
    #####:  591:	  players[i]++;
        -:  592:	}
        -:  593:    }
        -:  594:
        -:  595:  //find new highest score
    #####:  596:  j = 0;
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
    #####:  599:      if ( players[i] > players[j] )
        -:  600:	{
    #####:  601:	  j = i;
        -:  602:	}
        -:  603:    }
    #####:  604:  highScore = players[j];
        -:  605:
        -:  606:  //set winners in array to 1 and rest to 0
    #####:  607:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  608:    {
    #####:  609:      if ( players[i] == highScore )
        -:  610:	{
    #####:  611:	  players[i] = 1;
        -:  612:	}
        -:  613:      else
        -:  614:	{
    #####:  615:	  players[i] = 0;
        -:  616:	}
        -:  617:    }
        -:  618:
    #####:  619:  return 0;
        -:  620:}
        -:  621:
       91:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
       91:  625:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
    #####:  630:    for (i = 0; i < state->discardCount[player];i++){
    #####:  631:      state->deck[player][i] = state->discard[player][i];
    #####:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
    #####:  635:    state->deckCount[player] = state->discardCount[player];
    #####:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
    #####:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
    #####:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
    #####:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
    #####:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
    #####:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
    #####:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
    #####:  656:    if (deckCounter == 0)
    #####:  657:      return -1;
        -:  658:
    #####:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  660:    state->deckCount[player]--;
    #####:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
       91:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
       91:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
       91:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
       91:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       91:  673:    state->deckCount[player]--;
       91:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
       91:  677:  return 0;
        -:  678:}
        -:  679:
        6:  680:int getCost(int cardNumber)
        -:  681:{
        6:  682:  switch( cardNumber ) 
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
    #####:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
        6:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
    #####:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
        4:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
        4:  750:  int currentPlayer = whoseTurn(state);
        4:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
        4:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
        -:  755:  int *temphandP;
        4:  756:  temphandP = &temphand;
        4:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        4:  759:  int z = 0;// this is the counter for the temp hand
        4:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        4:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
        1:  769:      newAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphandP);
        1:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
        -:  773:      //+4 Cards
    #####:  774:      for (i = 0; i < 4; i++)
        -:  775:	{
    #####:  776:	  drawCard(currentPlayer, state);
        -:  777:	}
        -:  778:			
        -:  779:      //+1 Buy
    #####:  780:      state->numBuys++;
        -:  781:			
        -:  782:      //Each other player draws a card
    #####:  783:      for (i = 0; i < state->numPlayers; i++)
        -:  784:	{
    #####:  785:	  if ( i != currentPlayer )
        -:  786:	    {
    #####:  787:	      drawCard(i, state);
        -:  788:	    }
        -:  789:	}
        -:  790:			
        -:  791:      //put played card in played card pile
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
    #####:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
    #####:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
    #####:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
    #####:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
    #####:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case remodel:
    #####:  888:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:	{
    #####:  892:	  return -1;
        -:  893:	}
        -:  894:
    #####:  895:      gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:      //discard card from hand
    #####:  898:      discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:      //discard trashed card
    #####:  901:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:	{
    #####:  903:	  if (state->hand[currentPlayer][i] == j)
        -:  904:	    {
    #####:  905:	      discardCard(i, currentPlayer, state, 0);			
    #####:  906:	      break;
        -:  907:	    }
        -:  908:	}
        -:  909:
        -:  910:
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case smithy:
        -:  914:
        1:  915:      newSmithy(currentPlayer, state, handPos);
        1:  916:      return 0;
        -:  917:
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
    #####:  948:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
    #####:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:        newSteward( currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
    #####: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
    #####: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
    #####: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        1: 1224:        newSalvager(currentPlayer, state, handPos, choice1);
        1: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
        1: 1228:        newSeaHag(currentPlayer,state);
        1: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        2: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        2: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        2: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        2: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        2: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        2: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        2: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        2: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        2: 1300:  return 0;
        -: 1301:}
        -: 1302:
        1: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        1: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
        1: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        1: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        1: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        1: 1337:  return 0;
        -: 1338:}
        -: 1339:
       17: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
       17: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
      102: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
       85: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
       74: 1352:	  state->coins += 1;
        -: 1353:	}
       11: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
       11: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
       17: 1365:  state->coins += bonus;
        -: 1366:
       17: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
