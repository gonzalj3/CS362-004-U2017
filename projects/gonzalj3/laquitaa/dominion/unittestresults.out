Testing salvager.	
Error: Number of Coins has not increased by the correct number of coins.
Coins should Be: 10 and is 14.
Number of Buys should Be: 2 and is 2.
The number of feast card piles is 0 and is suppose to be 0. 
File 'cardtest1.c'
Lines executed:68.57% of 35
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:22.44% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest1.c buyCard 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "salvager"
        -:   13:
        1:   14:void changeCheck(int card, struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int x=0, numFeast =0; 
        1:   17:	if(G->coins != (testG->coins+4))
        -:   18:		{
        1:   19:			printf("Error: Number of Coins has not increased by the correct number of coins.\n");
        -:   20:		}
    #####:   21:	else if(G->numBuys != (testG->numBuys+1))
        -:   22:		{
    #####:   23:			printf("Error: Number of Buys has not increased by one.\n");
        -:   24:		}
    #####:   25:	else if(G->supplyCount[card] == (testG->supplyCount[card]+1))
        -:   26:		{
    #####:   27:			printf("Error: Number of cards in draw pile has increased when no change should have occurred.\n");
        -:   28:		}
    #####:   29:	else if(G->handCount[0] != (testG->handCount[0]-1))
        -:   30:		{
    #####:   31:			printf("Error: Number of cards player's hand did not decrease.\n");
        -:   32:		}		
    #####:   33:	else if(G->deckCount[0] != (testG->deckCount[0]-1))
        -:   34:		{
    #####:   35:			printf("Error: Number of cards in the player's hand and deck did not decrease.\n");
        -:   36:		}	
        -:   37:	else
        -:   38:		{
    #####:   39:			printf("Past Check Changes Test.\n");
        -:   40:		}
        1:   41:			printf("Coins should Be: %d and is %d.\n",G->coins,testG->coins+4);
        1:   42:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys+1);
        5:   43:	for(; x<G->handCount[0];x++)
        -:   44:	{
        4:   45:		if(G->hand[0][x]==feast)
        -:   46:		{
    #####:   47:			numFeast++;
        -:   48:		}	
        -:   49:	}
        1:   50:	printf("The number of feast card piles is %d and is suppose to be 0. \n",numFeast);	}
        -:   51:
        -:   52:
        1:   53:int main(){
        -:   54:	struct gameState G, testG;
        1:   55:	int numberOfPlayers = 2;
        1:   56:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   57:               , remodel, smithy, village, baron, great_hall};
        1:   58:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, x=0;
        1:   59:	int seed = 45;
        -:   60:
        1:   61:	printf("Testing salvager.	\n");
        1:   62:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   63:	G.coins = 10;
        6:   64:	for(; x<G.handCount[0];x++)
        -:   65:	{
        5:   66:		if(G.hand[0][x]==feast)
        -:   67:		{
    #####:   68:			G.hand[0][x]=gardens;
        -:   69:		}	
        -:   70:	}
        1:   71:	G.hand[0][0] = feast;
        -:   72:	
        1:   73:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   74:	cardEffect(salvager, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   75:	changeCheck(KARD,&G,&testG);
        -:   76:
        -:   77:
        1:   78:	return 0 ;
        -:   79:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       16:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
       10:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      144:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      104:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       12:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       12:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       12:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       12:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       12:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       12:  576:    state->deckCount[player]--;
       12:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       12:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        1:  647:	printf("inside playAdventurer \n");
        4:  648:	while(drawntreasure<2){
        2:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        2:  652:	drawCard(currentPlayer, state);
        2:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        2:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        2:  657:		  drawntreasure++;
        2:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        2:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        1:  672:}
        -:  673:
    #####:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
    #####:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
    #####:  681:      discardCard(handPos, currentPlayer, state, 0);
    #####:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        2:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        2:  763:  int currentPlayer = whoseTurn(state);
        2:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        2:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        2:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        2:  770:  int z = 0;// this is the counter for the temp hand
        2:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        2:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        1:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        1:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
    #####:  894:		playSmithy(state, currentPlayer, handPos);
    #####:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        1: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        1: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        1: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        1: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        1: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        1: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        1: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        1: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        1: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        1: 1290:  return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
        2: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
        2: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       12: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       10: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
        8: 1342:	  state->coins += 1;
        -: 1343:	}
        2: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
        2: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
        2: 1355:  state->coins += bonus;
        -: 1356:
        2: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing seahag after initializing game, so current player should be 0.
Error: found only 1 curses.
Error: Player did not increase discard count.
File 'cardtest2.c'
Lines executed:87.10% of 31
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:24.56% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardttest2.c seahag
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "sea_hag"
        -:   13:
        1:   14:void changeCheck(int currentPlayer, struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int x = 0, i = 0, foundCurse = 0, foundDiscard = 0;
        -:   17:	
        5:   18:	for(; x<testG->numPlayers;x++)
        -:   19:	{
        4:   20:		if(x != currentPlayer)
        -:   21:		{
       13:   22:			for(; i< testG->deckCount[x];i++)
        -:   23:				{
       10:   24:					if(G->deck[x][i]!=testG->deck[x][i])
        -:   25:					{
        1:   26:						if(G->deck[x][i]==curse)
        -:   27:						{
        1:   28:							foundCurse++;
        -:   29:						}	
        -:   30:					}
        -:   31:				}
        -:   32:		}
        -:   33:	}
        -:   34:	
        1:   35:	if(foundCurse == 3)
        -:   36:	{
    #####:   37:		printf("Past Test: Found curses.\n");
        -:   38:	}
        -:   39:	else
        -:   40:	{
        1:   41:		printf("Error: found only %d curses.\n",foundCurse);
        -:   42:	}
        -:   43:	
        1:   44:	x=0;
        -:   45:	
        1:   46:	for(; x<G->discardCount[currentPlayer];x++)
        -:   47:	{
    #####:   48:		if(G->discard[currentPlayer][x] != testG->discard[currentPlayer][x])
        -:   49:		{
    #####:   50:			foundDiscard++;
        -:   51:		}
        -:   52:	}
        -:   53:	
        1:   54:	if(foundCurse != 1)
        -:   55:	{
    #####:   56:		printf("Error: Player does not have a new discarded card.\n");
        -:   57:	}
        -:   58:	
        1:   59:	if(G->discardCount[currentPlayer]==testG->discardCount[currentPlayer])
        -:   60:	{
        1:   61:		printf("Error: Player did not increase discard count.\n");
        -:   62:	}
        1:   63:}
        -:   64:
        1:   65:int main(){
        -:   66:	struct gameState G, testG;
        1:   67:	int numberOfPlayers = 4;
        1:   68:	int kards[10]={adventurer, salvager, sea_hag, gardens, mine
        -:   69:               , remodel, smithy, village, baron, great_hall};
        1:   70:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   71:	int seed = 45;
        -:   72:
        1:   73:	printf("Testing seahag after initializing game, so current player should be 0.\n");
        1:   74:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   75:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   76:	cardEffect(sea_hag, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   77:	changeCheck(0,&G,&testG);
        -:   78:
        -:   79:
        1:   80:	return 0 ;
        -:   81:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       24:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       11:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       11:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       11:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
       80:  215:    card = floor(Random() * state->deckCount[player]);
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      299:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      219:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       17:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       17:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       17:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       17:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       17:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       17:  576:    state->deckCount[player]--;
       17:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       17:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        1:  647:	printf("inside playAdventurer \n");
        4:  648:	while(drawntreasure<2){
        2:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        2:  652:	drawCard(currentPlayer, state);
        2:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        2:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        2:  657:		  drawntreasure++;
        2:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        2:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        1:  672:}
        -:  673:
    #####:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
    #####:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
    #####:  681:      discardCard(handPos, currentPlayer, state, 0);
    #####:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        3:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        3:  763:  int currentPlayer = whoseTurn(state);
        3:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        3:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        3:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        3:  770:  int z = 0;// this is the counter for the temp hand
        3:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        3:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        1:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        1:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
    #####:  894:		playSmithy(state, currentPlayer, handPos);
    #####:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        1: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        1: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        1: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        1: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        1: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        1: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        1: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        1: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        1: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        1: 1290:  return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
        3: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
        3: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       18: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       15: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       13: 1342:	  state->coins += 1;
        -: 1343:	}
        2: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
        2: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
        3: 1355:  state->coins += bonus;
        -: 1356:
        3: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing smithy.
The size of the deck before smithy is 5 and after it is 2.
Past Check Changes Test.
Hand count is: 7 and should be 7.
Deck count is: 2 and should be 2.
File 'cardtest3.c'
Lines executed:91.30% of 23
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:25.80% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardtest3.c smithy 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "smithy"
        -:   13:
        1:   14:void changeCheck(struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int exHandC = (testG->handCount[0]+2);
        1:   17:	int exDeckC = (testG->deckCount[0]-3);
        1:   18:	if(G->handCount[0] != exHandC)
        -:   19:	{
    #####:   20:			printf("Error: Number of cards player's hand did not increase.\n");
        -:   21:	}
        1:   22:	if(G->deckCount[0] != exDeckC)
        -:   23:	{
    #####:   24:			printf("Error: Number of cards in player's deck did not decrease by 3.\n");
        -:   25:	}
        -:   26:	else
        -:   27:		{
        1:   28:			printf("Past Check Changes Test.\n");
        -:   29:		}
        1:   30:			printf("Hand count is: %d and should be %d.\n",G->handCount[0],exHandC);
        1:   31:			printf("Deck count is: %d and should be %d.\n",G->deckCount[0],exDeckC);
        1:   32:}
        -:   33:
        1:   34:int main(){
        -:   35:	struct gameState G, testG;
        1:   36:	int numberOfPlayers = 2;
        1:   37:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   38:               , remodel, smithy, village, baron, great_hall};
        1:   39:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, x=0;
        1:   40:	int seed = 9380;
        -:   41:
        1:   42:	printf("Testing smithy.\n");
        1:   43:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   44:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   45:	cardEffect(smithy, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   46:	printf("The size of the deck before smithy is %d and after it is %d.\n",testG.deckCount[0],G.deckCount[0]);
        1:   47:	changeCheck(&G, &testG);
        -:   48:
        -:   49:
        1:   50:	return 0 ;
        -:   51:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       32:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       14:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       14:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       14:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
      100:  215:    card = floor(Random() * state->deckCount[player]);
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      360:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      260:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       25:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       25:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       25:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  576:    state->deckCount[player]--;
       25:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       25:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        1:  647:	printf("inside playAdventurer \n");
        4:  648:	while(drawntreasure<2){
        2:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        2:  652:	drawCard(currentPlayer, state);
        2:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        2:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        2:  657:		  drawntreasure++;
        2:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        2:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        1:  672:}
        -:  673:
        1:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
        4:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
        1:  681:      discardCard(handPos, currentPlayer, state, 0);
        1:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        4:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        4:  763:  int currentPlayer = whoseTurn(state);
        4:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        4:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        4:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        4:  770:  int z = 0;// this is the counter for the temp hand
        4:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        4:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        1:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        1:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
        1:  894:		playSmithy(state, currentPlayer, handPos);
        1:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
        4: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
        4: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       24: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       20: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       16: 1342:	  state->coins += 1;
        -: 1343:	}
        4: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
        4: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
        4: 1355:  state->coins += bonus;
        -: 1356:
        4: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing adventurer.
5
5
inside playAdventurer 
we have found a treasure card
we have found a treasure card
found isilver , 7
found gold , 7
Error: Number of discarded cards does not equal what is expected.
Error: Did not find two extra treasure cards.
File 'cardtest4.c'
Lines executed:81.82% of 55
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:25.80% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardtest4.c adventurer 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "adventurer"
        -:   13:
        1:   14:void changeCheck(struct gameState *G, struct gameState *oldG)
        -:   15:{
        1:   16:	int newlyDiscarded =0, x =0, counter =0, counterNew = 0, gold = 0, silver =0;
        1:   17:	newlyDiscarded = oldG->deckCount[0] - G->deckCount[0];
        7:   18:	for(x = 0 ; x<=oldG->handCount[0];x++)
        -:   19:	{
        6:   20:		if(oldG->hand[0][x] ==copper)
        -:   21:		{
    #####:   22:			counter++;
        -:   23:		}
        6:   24:		if(oldG->hand[0][x] ==silver)
        -:   25:		{
        1:   26:			counter++;
        -:   27:		//	silver++;
        -:   28:		}
        6:   29:		if(oldG->hand[0][x] ==gold)
        -:   30:		{
        1:   31:			counter++;
        -:   32:		//	gold++;
        -:   33:		}
        -:   34:		
        -:   35:	}
        -:   36:	
        9:   37:	for(x = 0; x<=G->handCount[0];x++)
        -:   38:	{
        8:   39:		if(G->hand[0][x] == copper)
        -:   40:		{
    #####:   41:			counterNew++;
    #####:   42:			printf("found opper, %d\n",x);
        -:   43:
        -:   44:		}
        8:   45:		if(G->hand[0][x] == silver)
        -:   46:		{
        1:   47:			counterNew++;
        1:   48:			silver++;
        1:   49:			printf("found isilver , %d\n",x);
        -:   50:
        -:   51:		}
        8:   52:		if(G->hand[0][x] == gold)
        -:   53:		{
        1:   54:			counterNew++;
        1:   55:			gold++;
        1:   56:			printf("found gold , %d\n",x);
        -:   57:		}
        -:   58:		
        -:   59:	}
        -:   60:	
        -:   61:	
        1:   62:	if(G->discardCount[0] != (newlyDiscarded+2))
        -:   63:		{
        1:   64:			printf("Error: Number of discarded cards does not equal what is expected.\n");
        -:   65:		}
    #####:   66:	else if(G->deckCount[0] != (newlyDiscarded + G->deckCount[0]))
        -:   67:	{
    #####:   68:			printf("Error: Deck count is not what is expected.\n");
        -:   69:	}
        -:   70:	else
        -:   71:	{
    #####:   72:			printf("Past Check Changes Test.\n");
        -:   73:	}
        -:   74:			//printf("Hand count should Be: %d and is %d.\n",G->handCount[0],testG->handCount[0]+3);
        -:   75:			//printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys+1);
        1:   76:	if(gold != 1 || silver != 1)
        -:   77:	{
    #####:   78:		printf("we have %d gold and %d silver when we should have 1 each.\n", gold, silver);
        -:   79:	}
        1:   80:	if(counterNew != counter + 2)
        -:   81:	{
        1:   82:			printf("Error: Did not find two extra treasure cards.\n");
        -:   83:	}
        -:   84:
        1:   85:}
        -:   86:
        1:   87:int main(){
        -:   88:	struct gameState G, testG;
        1:   89:	int numberOfPlayers = 2;
        1:   90:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   91:               , remodel, smithy, village, baron, great_hall};
        1:   92:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, x = 0;
        1:   93:	int seed = 9380;
        -:   94:
        1:   95:	printf("Testing adventurer.\n");
        1:   96:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   97:	G.deck[0][(G.deckCount[0]-1)] = gold;
        1:   98:	printf("%d\n",G.deckCount[0]);
        1:   99:	G.deck[0][(G.deckCount[0]-2)] = silver;
        1:  100:	printf("%d\n",G.deckCount[0]);
        7:  101:	for(x = 0; x<=G.handCount[0];x++)
        -:  102:	{
        6:  103:		if(G.hand[0][x] ==copper)
        -:  104:		{
        3:  105:			G.hand[0][x] = baron;
        -:  106:		}
        6:  107:		if(G.hand[0][x] ==silver)
        -:  108:		{
    #####:  109:			G.hand[0][x] = baron;
        -:  110:		}
        6:  111:		if(G.hand[0][x] ==gold)
        -:  112:		{
    #####:  113:			G.hand[0][x] = baron;
    #####:  114:			printf("%d\n", x);
        -:  115:		}
        -:  116:	}
        1:  117:	memcpy(&testG, &G, sizeof(struct gameState));
        -:  118:
        1:  119:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
        1:  120:	changeCheck(&G,&testG);
        -:  121:
        -:  122:
        1:  123:	return 0 ;
        -:  124:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       17:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       17:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       17:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      421:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      301:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       32:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       32:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       32:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       32:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       32:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       32:  576:    state->deckCount[player]--;
       32:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       32:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        2:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        2:  647:	printf("inside playAdventurer \n");
        8:  648:	while(drawntreasure<2){
        4:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        4:  652:	drawCard(currentPlayer, state);
        4:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        4:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        4:  657:		  drawntreasure++;
        4:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        4:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        2:  672:}
        -:  673:
        1:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
        4:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
        1:  681:      discardCard(handPos, currentPlayer, state, 0);
        1:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        5:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        5:  763:  int currentPlayer = whoseTurn(state);
        5:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        5:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        5:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        5:  770:  int z = 0;// this is the counter for the temp hand
        5:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        5:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        2:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        2:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
        1:  894:		playSmithy(state, currentPlayer, handPos);
        1:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
        5: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
        5: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       30: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       25: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       19: 1342:	  state->coins += 1;
        -: 1343:	}
        6: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
        6: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
        5: 1355:  state->coins += bonus;
        -: 1356:
        5: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing buyCard when not enough coins exists for user attempting buy.
Past Check Changes Test.
Coins should Be: 0 and is 0.
Number of Buys should Be: 1 and is 1.
Supply Count should Be: 8 and is 8.

Testing buyCard when not enough buys exists for user attempting buy.
Past Check Changes Test.
Coins should Be: 5 and is 5.
Number of Buys should Be: 0 and is 0.
Supply Count should Be: 8 and is 8.

Testing buyCard when not enough cards exists in buy pile for user attempting buy.
Past Check Changes Test.
Coins should Be: 5 and is 5.
Number of Buys should Be: 1 and is 1.
Supply Count should Be: 8 and is 8.

Testing buyCard changes correct gamestate data after buy.
Past Check Changes Test.
Coins should Be: 0 and is 0.
Number of Buys should Be: 0 and is 0.
Supply Count should Be: 9 and is 9.

Testing buyCard when selecting a card that is not part of the kingdom cards.
Past Check Changes Test.
Coins should Be: 5 and is 5.
Number of Buys should Be: 1 and is 1.
Supply Count should Be: 8 and is 8.

File 'unittest1.c'
Lines executed:89.83% of 59
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:30.39% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        4:    9:void changeCheck(int card, struct gameState *G, struct gameState *testG)
        -:   10:{
        4:   11:	if(G->coins != testG->coins)
        -:   12:		{
    #####:   13:			printf("Error: Number of Coins has changed.\n");
        -:   14:		}
        4:   15:	else if(G->numBuys != testG->numBuys)
        -:   16:		{
    #####:   17:			printf("Error: Number of Buys is different.\n");
        -:   18:		}
        4:   19:	else if(G->supplyCount[card] != testG->supplyCount[card])
        -:   20:		{
    #####:   21:			printf("Error: Number of cards in draw pile changed.\n");
        -:   22:		}
        -:   23:	else
        -:   24:		{
        4:   25:			printf("Past Check Changes Test.\n");
        -:   26:		}
        4:   27:			printf("Coins should Be: %d and is %d.\n",G->coins,testG->coins);
        4:   28:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys);
        4:   29:			printf("Supply Count should Be: %d and is %d.\n\n",G->supplyCount[card],testG->supplyCount[card]);
        4:   30:}
        -:   31:
        1:   32:void checkDeductions(int card, struct gameState *G, struct gameState *testG)
        -:   33:{
        1:   34:	if(G->coins != (testG->coins-getCost(card)))
        -:   35:		{
    #####:   36:			printf("Error: Number of Coins has not been deducted.\n");
        -:   37:		}
        1:   38:	else if(G->numBuys != (testG->numBuys-1))
        -:   39:		{
    #####:   40:			printf("Error: Number of Buys has not been deducted.\n");
        -:   41:		}
        1:   42:	else if(G->supplyCount[card] != (testG->supplyCount[card]-1))
        -:   43:		{
    #####:   44:			printf("Error: Number of cards is different.\n");
        -:   45:		}
        -:   46:	else
        -:   47:		{
        1:   48:			printf("Past Check Changes Test.\n");
        -:   49:		}
        1:   50:			printf("Coins should Be: %d and is %d.\n",G->coins,(testG->coins-getCost(card)));
        1:   51:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys, (testG->numBuys-1));
        1:   52:			printf("Supply Count should Be: %d and is %d.\n\n",G->supplyCount[card], (testG->supplyCount[card]-1));
        1:   53:}
        -:   54:
        1:   55:int main(){
        -:   56:	struct gameState G, testG;
        1:   57:	int numberOfPlayers = 2;
        1:   58:	int kards[10]={adventurer, council_room, feast, gardens, mine
        -:   59:               , remodel, smithy, village, baron, great_hall};
        1:   60:	int seed = 45;
        -:   61:
        -:   62:/* Testing buyCard when not enough coins exists for user attempting buy.*/
        1:   63:	printf("Testing buyCard when not enough coins exists for user attempting buy.\n");
        1:   64:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   65:	G.coins = 0;
        1:   66:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   67:	buyCard(council_room,&G);
        1:   68:	changeCheck(1,&G,&testG);
        -:   69:
        -:   70:/* Testing buyCard when not enough buys exists for user attempting buy.*/
        1:   71:	printf("Testing buyCard when not enough buys exists for user attempting buy.\n");
        1:   72:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   73:	G.numBuys = 0;
        1:   74:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   75:	buyCard(council_room,&G);
        1:   76:	changeCheck(1,&G,&testG);
        -:   77:
        -:   78:/* Testing buyCard when not enough cards in the buy pile exists for user attempting buy.*/
        1:   79:	printf("Testing buyCard when not enough cards exists in buy pile for user attempting buy.\n");
        1:   80:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   81:	G.supplyCount[council_room] = 0;
        1:   82:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   83:	buyCard(council_room,&G);
        1:   84:	changeCheck(1,&G,&testG);
        -:   85:
        -:   86:/* Testing buyCard changes correct gamestate data after buy.*/
        1:   87:	printf("Testing buyCard changes correct gamestate data after buy.\n");
        1:   88:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   89:	G.coins = 5;
        1:   90:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   91:	buyCard(council_room,&G);
        1:   92:	checkDeductions(council_room,&G,&testG);
        -:   93:
        -:   94:/* Testing buyCard when selecting a card that is not part of the kingdom cards.*/ 
        1:   95:	printf("Testing buyCard when selecting a card that is not part of the kingdom cards.\n");
        1:   96:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   97:	G.coins = 5;
        1:   98:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   99:	buyCard(embargo,&G);
        1:  100:	changeCheck(1,&G,&testG);
        1:  101:	return 0 ;
        -:  102:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      330:    8:int compare(const void* a, const void* b) {
      330:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      330:   11:  if (*(int*)a < *(int*)b)
       88:   12:    return -1;
      242:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       40:  115:		  if (numPlayers == 2){ 
       18:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       80:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       32:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       22:  140:      state->deckCount[i] = 0;
       88:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       66:  143:	  state->deck[i][j] = estate;
       66:  144:	  state->deckCount[i]++;
        -:  145:	}
      176:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      154:  148:	  state->deck[i][j] = copper;
      154:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       32:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       22:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       32:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       22:  166:      state->handCount[i] = 0;
       22:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
       50:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
       22:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       22:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       22:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       22:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
      220:  215:    card = floor(Random() * state->deckCount[player]);
      220:  216:    newDeck[newDeckPos] = state->deck[player][card];
      220:  217:    newDeckPos++;
      836:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      616:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      220:  221:    state->deckCount[player]--;
        -:  222:  }
      242:  223:  for (i = 0; i < newDeckPos; i++) {
      220:  224:    state->deck[player][i] = newDeck[i];
      220:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       22:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        5:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        5:  280:  who = state->whoseTurn;
        -:  281:
        5:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       57:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       57:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       57:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       57:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       57:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       57:  576:    state->deckCount[player]--;
       57:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       57:  580:  return 0;
        -:  581:}
        -:  582:
        5:  583:int getCost(int cardNumber)
        -:  584:{
        5:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
        5:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        2:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        2:  647:	printf("inside playAdventurer \n");
        8:  648:	while(drawntreasure<2){
        4:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        4:  652:	drawCard(currentPlayer, state);
        4:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        4:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        4:  657:		  drawntreasure++;
        4:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        4:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        2:  672:}
        -:  673:
        1:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
        4:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
        1:  681:      discardCard(handPos, currentPlayer, state, 0);
        1:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        5:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        5:  763:  int currentPlayer = whoseTurn(state);
        5:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        5:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        5:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        5:  770:  int z = 0;// this is the counter for the temp hand
        5:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        5:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        2:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        2:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
        1:  894:		playSmithy(state, currentPlayer, handPos);
        1:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
        1: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
        1: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
        1: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
        1: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
        1: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
        1: 1327:  return 0;
        -: 1328:}
        -: 1329:
       10: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
       10: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       60: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       50: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       44: 1342:	  state->coins += 1;
        -: 1343:	}
        6: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
        6: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
       10: 1355:  state->coins += bonus;
        -: 1356:
       10: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing endTurn after initilizaing game and first player turn ends.
hands will be 24
hands will be 8
hands will be 9
hands will be 10
hands will be 11
Past Check Changes Test.
Whose turn it is 1 and was 0.
Number of coins changed from preset 100 for the former player to 4 for the new player.
Number of buys changed from preset 199 for the former player to 1 for the new player.
Number of actions changed from preset 200 for the former player to 1 for the new player.
Former players handcount went from 5 to 0.
Current players handcount went from 0 to 5.
Number of discarded cards for previous player was 0 and now is 5.
The Former player's hand included card 24 and is now -1.
The Former player's hand included card 8 and is now -1.
The Former player's hand included card 9 and is now -1.
The Former player's hand included card 10 and is now -1.
The Former player's hand included card 11 and is now -1.
Testing endTurn after initilizaing game and last player turn ends.
hands will be 24
hands will be 8
hands will be 9
hands will be 10
hands will be 11
Past Check Changes Test.
Whose turn it is 0 and was 1.
Number of coins changed from preset 100 for the former player to 2 for the new player.
Number of buys changed from preset 199 for the former player to 1 for the new player.
Number of actions changed from preset 200 for the former player to 1 for the new player.
Former players handcount went from 5 to 0.
Current players handcount went from 0 to 5.
Number of discarded cards for previous player was 0 and now is 5.
The Former player's hand included card 24 and is now -1.
The Former player's hand included card 8 and is now -1.
The Former player's hand included card 9 and is now -1.
The Former player's hand included card 10 and is now -1.
The Former player's hand included card 11 and is now -1.
File 'unittest2.c'
Lines executed:86.76% of 68
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:33.92% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest2.c endTurn
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        2:   12:void changeCheck(int player, int playerFormer, struct gameState *G, struct gameState *oldG)
        -:   13:{
        2:   14:	int handStaySame = 0;
        2:   15:	int x =0;
       12:   16:	for(;x<oldG->handCount[playerFormer];x++)
        -:   17:	{
       10:   18:		if(oldG->hand[playerFormer][x] == G->hand[playerFormer][x])
        -:   19:		{
    #####:   20:			handStaySame++;
        -:   21:		}			
        -:   22:	}
        2:   23:	x=0;
        -:   24:
        2:   25:	if(G->whoseTurn == playerFormer)
        -:   26:		{
    #####:   27:			printf("Error: Player has not changed. \n");
        -:   28:		}
        2:   29:	else if(G->coins == oldG->coins)
        -:   30:		{
    #####:   31:			printf("Error: Number of coins is not different.\n");
        -:   32:		}
        2:   33:	else if(G->discardCount[playerFormer] <= oldG->discardCount[playerFormer])
        -:   34:		{
    #####:   35:			printf("Error: Number of discarded cards for the former player %d, has not increased.\n",G->discardCount[player]);
        -:   36:		}
        2:   37:	else if(G->numActions != 1)
        -:   38:		{
    #####:   39:			printf("Error: The number of buys is not the standard 1 at the beginning of a turn and is %d.\n",G->numActions);
        -:   40:		}
        2:   41:	else if(G->numBuys != 1)
        -:   42:		{
    #####:   43:			printf("Error: The number of buys is not the standard 1 at the beginning of a turn and is %d.\n",G->numBuys);
        -:   44:		}
        2:   45:	else if(oldG->hand[playerFormer][0]==G->hand[playerFormer][0])
        -:   46:		{
    #####:   47:			printf("Error: The former player's first card in their hand still exists.\n");
        -:   48:		}
        2:   49:	else if(oldG->handCount[playerFormer] <= G->handCount[playerFormer])
        -:   50:		{
    #####:   51:			printf("Error: The hand count for the former player has not decreased.\n");
        -:   52:		}
        2:   53:	else if(handStaySame >0)
        -:   54:		{
    #####:   55:			printf("Error: The hand for the former player has not changed for %d cards\n",handStaySame);
        -:   56:		}
        -:   57:else
        -:   58:		{
        2:   59:			printf("Past Check Changes Test.\n");
        -:   60:		}
        -:   61:
        2:   62:			printf("Whose turn it is %d and was %d.\n",G->whoseTurn,oldG->whoseTurn);
        2:   63:			printf("Number of coins changed from preset %d for the former player to %d for the new player.\n",oldG->coins, G->coins);
        2:   64:			printf("Number of buys changed from preset %d for the former player to %d for the new player.\n",oldG->numBuys, G->numBuys); 
        2:   65:			printf("Number of actions changed from preset %d for the former player to %d for the new player.\n",oldG->numActions, G->numActions); 
        2:   66:					printf("Former players handcount went from %d to %d.\n", oldG->handCount[playerFormer], G->handCount[playerFormer]); 
        2:   67:			printf("Current players handcount went from %d to %d.\n", oldG->handCount[player], G->handCount[player]); 
        2:   68:			printf("Number of discarded cards for previous player was %d and now is %d.\n",oldG->discardCount[playerFormer],G->discardCount[playerFormer]);
       12:   69:			for(;x<oldG->handCount[playerFormer];x++)
        -:   70:			{
       10:   71:			printf("The Former player's hand included card %d and is now %d.\n",oldG->hand[playerFormer][x],G->hand[playerFormer][x]);
        -:   72:			}
        2:   73:}
        -:   74:
        -:   75:
        1:   76:int main(){
        -:   77:	struct gameState G, oldG;
        1:   78:	int numberOfPlayers = 2;
        -:   79:	int currentPlayer, previousPlayer;
        1:   80:	int kards[10]={ salvager,council_room, feast, gardens, mine
        -:   81:               , remodel, smithy, village, baron, great_hall};
        1:   82:	int seed = 45;
        1:   83:	int x=0;
        -:   84:
        -:   85:/* Testing endTurn when user is first player.*/
        1:   86:	printf("Testing endTurn after initilizaing game and first player turn ends.\n");
        1:   87:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   88:	G.coins=100;
        1:   89:	G.numBuys=199;
        1:   90:	G.numActions=200;
        6:   91:	for(;x<G.handCount[0];x++)
        -:   92:	{
        5:   93:		G.hand[0][x]=kards[x];
        5:   94:		printf("hands will be %d\n",G.hand[0][x]);
        -:   95:	}
        1:   96:	memcpy(&oldG, &G, sizeof(struct gameState));
        1:   97:	previousPlayer = G.whoseTurn;
        1:   98:	endTurn(&G);
        1:   99:	currentPlayer = G.whoseTurn;
        1:  100:	changeCheck(currentPlayer, previousPlayer, &G,&oldG);
        -:  101:
        -:  102:/* Testing endTurn when user is last player.*/
        1:  103:	x=0;
        1:  104:	printf("Testing endTurn after initilizaing game and last player turn ends.\n");
        1:  105:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:  106:	endTurn(&G);	
        1:  107:	G.coins=100;
        1:  108:	G.numBuys=199;
        1:  109:	G.numActions=200;
        6:  110:	for(;x<G.handCount[1];x++)
        -:  111:	{
        5:  112:		G.hand[1][x]=kards[x];
        5:  113:		printf("hands will be %d\n",G.hand[1][x]);
        -:  114:	}
        1:  115:	memcpy(&oldG, &G, sizeof(struct gameState));
        1:  116:	previousPlayer = G.whoseTurn;
        1:  117:	endTurn(&G);
        1:  118:	currentPlayer = G.whoseTurn;
        1:  119:	changeCheck(currentPlayer, previousPlayer, &G,&oldG);
        -:  120:
        1:  121:	return 0;
        -:  122:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      390:    8:int compare(const void* a, const void* b) {
      390:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      390:   11:  if (*(int*)a < *(int*)b)
      104:   12:    return -1;
      286:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
        -:   74:    {
       11:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
        -:   88:    {
       11:   89:      state->supplyCount[estate] = 8;
       11:   90:      state->supplyCount[duchy] = 8;
       11:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       48:  115:		  if (numPlayers == 2){ 
       22:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       38:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       26:  140:      state->deckCount[i] = 0;
      104:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       78:  143:	  state->deck[i][j] = estate;
       78:  144:	  state->deckCount[i]++;
        -:  145:	}
      208:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      182:  148:	  state->deck[i][j] = copper;
      182:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       38:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       26:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       38:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       26:  166:      state->handCount[i] = 0;
       26:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
       60:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
       26:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       26:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       26:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      312:  214:  while (state->deckCount[player] > 0) {
      260:  215:    card = floor(Random() * state->deckCount[player]);
      260:  216:    newDeck[newDeckPos] = state->deck[player][card];
      260:  217:    newDeckPos++;
     1002:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      742:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      260:  221:    state->deckCount[player]--;
        -:  222:  }
      286:  223:  for (i = 0; i < newDeckPos; i++) {
      260:  224:    state->deck[player][i] = newDeck[i];
      260:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       26:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        5:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        5:  280:  who = state->whoseTurn;
        -:  281:
        5:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       82:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       82:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       82:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       82:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       82:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       82:  576:    state->deckCount[player]--;
       82:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       82:  580:  return 0;
        -:  581:}
        -:  582:
        5:  583:int getCost(int cardNumber)
        -:  584:{
        5:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
        5:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        2:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        2:  647:	printf("inside playAdventurer \n");
        8:  648:	while(drawntreasure<2){
        4:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        4:  652:	drawCard(currentPlayer, state);
        4:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        4:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        4:  657:		  drawntreasure++;
        4:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        4:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        2:  672:}
        -:  673:
        1:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
        4:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
        1:  681:      discardCard(handPos, currentPlayer, state, 0);
        1:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        5:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        5:  763:  int currentPlayer = whoseTurn(state);
        5:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        5:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        5:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        5:  770:  int z = 0;// this is the counter for the temp hand
        5:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        5:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        2:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        2:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
        1:  894:		playSmithy(state, currentPlayer, handPos);
        1:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
        1: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
        1: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
        1: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
        1: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
        1: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
        1: 1327:  return 0;
        -: 1328:}
        -: 1329:
       15: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
       15: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       90: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       75: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       64: 1342:	  state->coins += 1;
        -: 1343:	}
       11: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
       11: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
       15: 1355:  state->coins += bonus;
        -: 1356:
       15: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing whoseTurn by changing gamestate manually and comparing expected and actual data.
Past Check Changes Test when player is 0.
Current player should be: 0 and is 0.
Past Check Changes Test when player is 1.
Current player should be: 1 and is 1.
Past Check Changes Test when player is 2.
Current player should be: 2 and is 2.
Past Check Changes Test when player is 3.
Current player should be: 3 and is 3.
File 'unittest3.c'
Lines executed:94.12% of 17
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:33.92% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest3.c whoseTurn
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        4:   12:void changeCheck(int expectedValue, struct gameState *G)
        -:   13:{
        4:   14:	if(expectedValue != whoseTurn(G))
        -:   15:		{
    #####:   16:			printf("Error: Number of whoseTurn does not return value that matches expected value.\n");
        -:   17:		}
        -:   18:	else
        -:   19:		{
        4:   20:			printf("Past Check Changes Test when player is %d.\n", G->whoseTurn);
        -:   21:		}
        4:   22:			printf("Current player should be: %d and is %d.\n",expectedValue,whoseTurn(G));
        4:   23:}
        -:   24:
        1:   25:int main(){
        -:   26:	struct gameState G;
        1:   27:	int numberOfPlayers = 4;
        1:   28:	int kards[10]={adventurer, council_room, feast, gardens, mine
        -:   29:               , remodel, smithy, village, baron, great_hall};
        1:   30:	int seed = 234;
        1:   31:	int x = 0;
        -:   32:	
        -:   33:/* Testing whoseTurn when not enough coins exists for user attempting buy.*/
        1:   34:	printf("Testing whoseTurn by changing gamestate manually and comparing expected and actual data.\n");
        1:   35:	initializeGame(numberOfPlayers, kards, seed, &G);
        -:   36:	//G.coins = 0;
        -:   37:	//memcpy(&testG, &G, sizeof(struct gameState));
        5:   38:	for(;x<numberOfPlayers;x++)
        -:   39:	{
        4:   40:		G.whoseTurn = x;
        4:   41:		changeCheck(x,&G);
        -:   42:	}
        -:   43:	
        1:   44:	return 0;
        -:   45:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      450:    8:int compare(const void* a, const void* b) {
      450:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      450:   11:  if (*(int*)a < *(int*)b)
      120:   12:    return -1;
      330:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       13:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       13:   44:  SelectStream(1);
       13:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       13:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       13:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      143:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1430:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       13:   73:  if (numPlayers == 2)
        -:   74:    {
       11:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       13:   87:  if (numPlayers == 2)
        -:   88:    {
       11:   89:      state->supplyCount[estate] = 8;
       11:   90:      state->supplyCount[duchy] = 8;
       11:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       13:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  102:  state->supplyCount[silver] = 40;
       13:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      273:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2145:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2015:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      130:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       52:  115:		  if (numPlayers == 2){ 
       22:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      104:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      130:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1885:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       43:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       30:  140:      state->deckCount[i] = 0;
      120:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       90:  143:	  state->deck[i][j] = estate;
       90:  144:	  state->deckCount[i]++;
        -:  145:	}
      240:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      210:  148:	  state->deck[i][j] = copper;
      210:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       43:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       30:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       43:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       30:  166:      state->handCount[i] = 0;
       30:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      364:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      351:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       13:  182:  state->outpostPlayed = 0;
       13:  183:  state->phase = 0;
       13:  184:  state->numActions = 1;
       13:  185:  state->numBuys = 1;
       13:  186:  state->playedCardCount = 0;
       13:  187:  state->whoseTurn = 0;
       13:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       78:  192:  for (it = 0; it < 5; it++){
       65:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       13:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       13:  198:  return 0;
        -:  199:}
        -:  200:
       30:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       30:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       30:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       30:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      360:  214:  while (state->deckCount[player] > 0) {
      300:  215:    card = floor(Random() * state->deckCount[player]);
      300:  216:    newDeck[newDeckPos] = state->deck[player][card];
      300:  217:    newDeckPos++;
     1129:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      829:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      300:  221:    state->deckCount[player]--;
        -:  222:  }
      330:  223:  for (i = 0; i < newDeckPos; i++) {
      300:  224:    state->deck[player][i] = newDeck[i];
      300:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       30:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        5:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        5:  280:  who = state->whoseTurn;
        -:  281:
        5:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       16:  346:int whoseTurn(struct gameState *state) {
       16:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       87:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       87:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       87:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       87:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       87:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       87:  576:    state->deckCount[player]--;
       87:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       87:  580:  return 0;
        -:  581:}
        -:  582:
        5:  583:int getCost(int cardNumber)
        -:  584:{
        5:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
        5:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        2:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        2:  647:	printf("inside playAdventurer \n");
        8:  648:	while(drawntreasure<2){
        4:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        4:  652:	drawCard(currentPlayer, state);
        4:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        4:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        4:  657:		  drawntreasure++;
        4:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        4:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        2:  672:}
        -:  673:
        1:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
        4:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
        1:  681:      discardCard(handPos, currentPlayer, state, 0);
        1:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        5:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        5:  763:  int currentPlayer = whoseTurn(state);
        5:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        5:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        5:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        5:  770:  int z = 0;// this is the counter for the temp hand
        5:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        5:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        2:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        2:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
        1:  894:		playSmithy(state, currentPlayer, handPos);
        1:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
        1: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
        1: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
        1: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
        1: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
        1: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
        1: 1327:  return 0;
        -: 1328:}
        -: 1329:
       16: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
       16: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       96: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       80: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       67: 1342:	  state->coins += 1;
        -: 1343:	}
       13: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
       13: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
       16: 1355:  state->coins += bonus;
        -: 1356:
       16: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
Testing isGameOver when province pile is empty.
Past Test.
Province pile has 0 cards.
The number of depleted card piles is 0. 
Testing isGameOver when  one to all of the following are card piles are empty: feast, gardens and baron.
Past Test.
Province pile has 8 cards.
The number of depleted card piles is 0. 
Past Test.
Province pile has 8 cards.
The number of depleted card piles is 1. 
Past Test.
Province pile has 8 cards.
The number of depleted card piles is 2. 

The function isGameOver recognizes when three card piles are empty.
Province pile has 8 cards.
The number of depleted card piles is 3. 
File 'unittest4.c'
Lines executed:88.89% of 45
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:35.69% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest4.c isGameOver
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        5:   12:void changeCheck(struct gameState *G, int testNumber, int kards[10])
        -:   13:{
        5:   14:	int x = 0;
        5:   15:	int depletion = 0;
        5:   16:	if(isGameOver(G)!=1&&testNumber==0)
        -:   17:		{
    #####:   18:			printf("Error: Does not recognize game is over when province pile is 0.\n");
        -:   19:		}
        5:   20:	else if(isGameOver(G)!=0&&testNumber==1)
        -:   21:		{
    #####:   22:			printf("Error: isGameOver states game is over when game is not over since no rule for game over is true.\n");
        -:   23:		}
        5:   24:	else if(isGameOver(G)!=0&&testNumber==2)
        -:   25:		{
    #####:   26:			printf("Error: isGameOver states game is over when game is not over since no rule for game over is true.\n");
        -:   27:		}
        5:   28:	else if(isGameOver(G)!=1&&testNumber==3)
        -:   29:		{
    #####:   30:			printf("Error: Does not recognize game is over when three card piles are completely depleted.\n");
        -:   31:		}
        5:   32:	else if(isGameOver(G)==1&&testNumber==3)
        -:   33:		{
        1:   34:			printf("\nThe function isGameOver recognizes when three card piles are empty.\n");
        -:   35:		}
        4:   36:	else if(isGameOver(G)!=0&&testNumber==4)
        -:   37:		{
    #####:   38:			printf("Error: isGameOver states game is over when game is NOT over since no rule for game over is true.\n");
        -:   39:		}					
        -:   40:	else
        -:   41:		{
        4:   42:			printf("Past Test.\n");
        -:   43:		}
        5:   44:	printf("Province pile has %d cards.\n", G->supplyCount[province]);
       55:   45:	for(; x<10;x++)
        -:   46:	{
       50:   47:		if(G->supplyCount[kards[x]]==0)
        -:   48:		{
        6:   49:			depletion++;
        -:   50:		}	
        -:   51:	}
        5:   52:	printf("The number of depleted card piles is %d. \n",depletion);	
        -:   53:
        5:   54:}
        -:   55:
        1:   56:int main(){
        -:   57:	struct gameState G;
        1:   58:	int numberOfPlayers = 2;
        1:   59:	int kards[10]={salvager, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   60:	int seed = 637;
        1:   61:	int testNumber=0;
        -:   62:
        -:   63:/* Testing isGameOver when province pile is 0.*/
        1:   64:	printf("Testing isGameOver when province pile is empty.\n");
        1:   65:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   66:	G.supplyCount[province]=0;
        1:   67:	changeCheck(&G, testNumber, kards);
        -:   68:	
        -:   69:/* Testing isGameOver when three card stacks are completely depleted.*/
        1:   70:	printf("Testing isGameOver when  one to all of the following are card piles are empty: feast, gardens and baron.\n");
        1:   71:	initializeGame(numberOfPlayers, kards, seed, &G);
        -:   72:	
        -:   73:	/* Testing isGameOver when no card pile is empty */
        1:   74:	testNumber = 4;
        1:   75:	changeCheck(&G, testNumber, kards);
        -:   76:	
        -:   77:	/* Testing isGameOver when one card pile is empty */
        1:   78:	G.supplyCount[feast]=0;
        1:   79:	testNumber = 1;
        1:   80:	changeCheck(&G, testNumber, kards);
        -:   81:	
        -:   82:	/* Testing isGameOver when two card piles is empty */
        1:   83:	G.supplyCount[gardens]=0;
        1:   84:	testNumber = 2;
        1:   85:	changeCheck(&G, testNumber, kards);	
        -:   86:	
        -:   87:	/* Testing isGameOver when three card piles is empty */	
        1:   88:	G.supplyCount[baron]=0;
        1:   89:	testNumber = 3;
        1:   90:	changeCheck(&G, testNumber, kards);
        -:   91:
        1:   92:	return 0;
        -:   93:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      510:    8:int compare(const void* a, const void* b) {
      510:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      510:   11:  if (*(int*)a < *(int*)b)
      136:   12:    return -1;
      374:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      165:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1650:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
        -:   74:    {
       13:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
        -:   88:    {
       13:   89:      state->supplyCount[estate] = 8;
       13:   90:      state->supplyCount[duchy] = 8;
       13:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      315:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2475:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2325:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      150:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       60:  115:		  if (numPlayers == 2){ 
       26:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2175:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       49:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       34:  140:      state->deckCount[i] = 0;
      136:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      102:  143:	  state->deck[i][j] = estate;
      102:  144:	  state->deckCount[i]++;
        -:  145:	}
      272:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      238:  148:	  state->deck[i][j] = copper;
      238:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       49:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       34:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       49:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       34:  166:      state->handCount[i] = 0;
       34:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      420:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      405:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       15:  182:  state->outpostPlayed = 0;
       15:  183:  state->phase = 0;
       15:  184:  state->numActions = 1;
       15:  185:  state->numBuys = 1;
       15:  186:  state->playedCardCount = 0;
       15:  187:  state->whoseTurn = 0;
       15:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       90:  192:  for (it = 0; it < 5; it++){
       75:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       15:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       15:  198:  return 0;
        -:  199:}
        -:  200:
       34:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       34:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       34:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       34:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      408:  214:  while (state->deckCount[player] > 0) {
      340:  215:    card = floor(Random() * state->deckCount[player]);
      340:  216:    newDeck[newDeckPos] = state->deck[player][card];
      340:  217:    newDeckPos++;
     1265:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      925:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      340:  221:    state->deckCount[player]--;
        -:  222:  }
      374:  223:  for (i = 0; i < newDeckPos; i++) {
      340:  224:    state->deck[player][i] = newDeck[i];
      340:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       34:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        5:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        5:  280:  who = state->whoseTurn;
        -:  281:
        5:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       16:  346:int whoseTurn(struct gameState *state) {
       16:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
       29:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       29:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        6:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       23:  401:  j = 0;
      598:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      575:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       33:  406:	  j++;
        -:  407:	}
        -:  408:    }
       23:  409:  if ( j >= 3)
        -:  410:    {
        5:  411:      return 1;
        -:  412:    }
        -:  413:
       18:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       97:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       97:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       97:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       97:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       97:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       97:  576:    state->deckCount[player]--;
       97:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       97:  580:  return 0;
        -:  581:}
        -:  582:
        5:  583:int getCost(int cardNumber)
        -:  584:{
        5:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
        5:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        2:  646:void playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z ){
        2:  647:	printf("inside playAdventurer \n");
        8:  648:	while(drawntreasure<2){
        4:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        4:  652:	drawCard(currentPlayer, state);
        4:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  654:	
        4:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)//JMG Found this Bug //introduced bug to not count gold as a resource
        -:  656:	  {
        4:  657:		  drawntreasure++;
        4:  658:		printf("we have found a treasure card\n");
        -:  659:	  }
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
        4:  666:      while(z-1>=0){
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:
    #####:  670:	printf("discardcount is now %d \n", state->discardCount[currentPlayer]);
        -:  671:      }
        2:  672:}
        -:  673:
        1:  674:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  675:	int i;
        4:  676:	for (i = 0; i < 3; i++) // JMG, found and fixed this bug//changed i < 3 to i <=3 which would have player draw 4 cards instead of 3
        -:  677:	{
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:      //discard card from hand
        1:  681:      discardCard(handPos, currentPlayer, state, 0);
        1:  682:}
        -:  683:
    #####:  684:void playGreat_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  685:      //+1 Card
    #####:  686:      drawCard(currentPlayer, state);
        -:  687:			
        -:  688:      //+1 Actions
    #####:  689:      state->numActions = state->numActions +2; //BUG: actions +2 instead of state->numActions++
        -:  690:			
        -:  691:      //discard card from hand
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:	 }
        -:  695:	 
    #####:  696:void playSteward(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos ){
    #####:  697:      if (choice1 == 1)
        -:  698:	{
        -:  699:	  //+2 cards
    #####:  700:	  drawCard(currentPlayer, state);
    #####:  701:	  drawCard(currentPlayer, state);
        -:  702:	}
    #####:  703:      else if (choice1 >= 2)  //changed == to >= so the else will never run
        -:  704:	{
        -:  705:	  //+2 coins
    #####:  706:	  state->coins = state->coins + 2;
        -:  707:	}
        -:  708:      else
        -:  709:	{
        -:  710:	  //trash 2 cards in hand
    #####:  711:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  712:	  discardCard(choice3, currentPlayer, state, 1);
        -:  713:	}
        -:  714:			
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
    #####:  717:    }
        -:  718:
    #####:  719:int playMine(int choice1, int choice2,  struct gameState *state, int currentPlayer, int handPos){
    #####:  720:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	int i;
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
    #####:  748:	      return 0;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
        -:  755:
        5:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
        5:  763:  int currentPlayer = whoseTurn(state);
        5:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
        5:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        5:  768:  int drawntreasure=0;
        -:  769:  int cardDrawn;
        5:  770:  int z = 0;// this is the counter for the temp hand
        5:  771:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  772:    nextPlayer = 0;
        -:  773:  }
        -:  774:  
        -:  775:	
        -:  776:  //uses switch to select card and perform actions
        5:  777:  switch( card ) 
        -:  778:    {
        -:  779:    case adventurer:
        2:  780:		playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand,  z );
        2:  781:		return 0; 
        -:  782:			
        -:  783:    case council_room:
        -:  784:      //+4 Cards
    #####:  785:      for (i = 0; i < 4; i++)
        -:  786:	{
    #####:  787:	  drawCard(currentPlayer, state);
        -:  788:	}
        -:  789:			
        -:  790:      //+1 Buy
    #####:  791:      state->numBuys++;
        -:  792:			
        -:  793:      //Each other player draws a card
    #####:  794:      for (i = 0; i < state->numPlayers; i++)
        -:  795:	{
    #####:  796:	  if ( i != currentPlayer )
        -:  797:	    {
    #####:  798:	      drawCard(i, state);
        -:  799:	    }
        -:  800:	}
        -:  801:			
        -:  802:      //put played card in played card pile
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:			
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:	if (supplyCount(choice1, state) <= 0){
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
    #####:  829:	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:		playMine(choice1, choice2, state, currentPlayer, handPos);	
    #####:  865:      return 0;
        -:  866:			
        -:  867:    case remodel:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:
    #####:  875:      gainCard(choice2, state, 0, currentPlayer);
        -:  876:
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:
        -:  880:      //discard trashed card
    #####:  881:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  882:	{
    #####:  883:	  if (state->hand[currentPlayer][i] == j)
        -:  884:	    {
    #####:  885:	      discardCard(i, currentPlayer, state, 0);			
    #####:  886:	      break;
        -:  887:	    }
        -:  888:	}
        -:  889:
        -:  890:
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case smithy:
        1:  894:		playSmithy(state, currentPlayer, handPos);
        1:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:      //+1 Card
    #####:  899:      drawCard(currentPlayer, state);
        -:  900:			
        -:  901:      //+2 Actions
    #####:  902:      state->numActions = state->numActions + 2;
        -:  903:			
        -:  904:      //discard played card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case baron:
    #####:  909:      state->numBuys++;//Increase buys by 1!
    #####:  910:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  911:	int p = 0;//Iterator for hand!
    #####:  912:	int card_not_discarded = 1;//Flag for discard set!
    #####:  913:	while(card_not_discarded){
    #####:  914:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  915:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:	    state->discardCount[currentPlayer]++;
    #####:  918:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  919:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  920:	    }
    #####:  921:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:	    state->handCount[currentPlayer]--;
    #####:  923:	    card_not_discarded = 0;//Exit the loop
        -:  924:	  }
    #####:  925:	  else if (p > state->handCount[currentPlayer]){
        -:  926:	    if(DEBUG) {
        -:  927:	      printf("No estate cards in your hand, invalid choice\n");
        -:  928:	      printf("Must gain an estate if there are any\n");
        -:  929:	    }
    #####:  930:	    if (supplyCount(estate, state) > 0){
    #####:  931:	      gainCard(estate, state, 0, currentPlayer);
    #####:  932:	      state->supplyCount[estate]--;//Decrement estates
    #####:  933:	      if (supplyCount(estate, state) == 0){
    #####:  934:		isGameOver(state);
        -:  935:	      }
        -:  936:	    }
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
        -:  939:			    
        -:  940:	  else{
    #####:  941:	    p++;//Next card
        -:  942:	  }
        -:  943:	}
        -:  944:      }
        -:  945:			    
        -:  946:      else{
    #####:  947:	if (supplyCount(estate, state) > 0){
    #####:  948:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  950:	  if (supplyCount(estate, state) == 0){
    #####:  951:	    isGameOver(state);
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      
    #####:  957:      return 0;
        -:  958:		
        -:  959:    case great_hall:
    #####:  960:		playGreat_hall(state, currentPlayer, handPos);
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
        -:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:				
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:		playSteward(choice1, choice2, choice3, state, currentPlayer, handPos);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
        1: 1197:      state->numBuys++;
        -: 1198:			
        1: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
        1: 1208:      discardCard(handPos, currentPlayer, state, 0);
        1: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
        5: 1212:      for (i = 0; i < state->numPlayers; i++){
        4: 1213:	if (i != currentPlayer){
        3: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:	  state->discardCount[i]++;
        3: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
        1: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
        2: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        2: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
        2: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        2: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        2: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        2: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        2: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        2: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
        1: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
        1: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
        1: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
        1: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
        1: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
        1: 1327:  return 0;
        -: 1328:}
        -: 1329:
       18: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
       18: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
      108: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
       90: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
       77: 1342:	  state->coins += 1;
        -: 1343:	}
       13: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
       13: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
       18: 1355:  state->coins += bonus;
        -: 1356:
       18: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
