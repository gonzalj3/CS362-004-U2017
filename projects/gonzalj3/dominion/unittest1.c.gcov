        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "rngs.h"
        -:    8:
        4:    9:void changeCheck(int card, struct gameState *G, struct gameState *testG)
        -:   10:{
        4:   11:	if(G->coins != testG->coins)
        -:   12:		{
    #####:   13:			printf("Error: Number of Coins has changed.\n");
        -:   14:		}
        4:   15:	else if(G->numBuys != testG->numBuys)
        -:   16:		{
    #####:   17:			printf("Error: Number of Buys is different.\n");
        -:   18:		}
        4:   19:	else if(G->supplyCount[card] != testG->supplyCount[card])
        -:   20:		{
    #####:   21:			printf("Error: Number of cards in draw pile changed.\n");
        -:   22:		}
        -:   23:	else
        -:   24:		{
        4:   25:			printf("Past Check Changes Test.\n");
        -:   26:		}
        4:   27:			printf("Coins should Be: %d and is %d.\n",G->coins,testG->coins);
        4:   28:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys);
        4:   29:			printf("Supply Count should Be: %d and is %d.\n\n",G->supplyCount[card],testG->supplyCount[card]);
        4:   30:}
        -:   31:
        1:   32:void checkDeductions(int card, struct gameState *G, struct gameState *testG)
        -:   33:{
        1:   34:	if(G->coins != (testG->coins-getCost(card)))
        -:   35:		{
    #####:   36:			printf("Error: Number of Coins has not been deducted.\n");
        -:   37:		}
        1:   38:	else if(G->numBuys != (testG->numBuys-1))
        -:   39:		{
    #####:   40:			printf("Error: Number of Buys has not been deducted.\n");
        -:   41:		}
        1:   42:	else if(G->supplyCount[card] != (testG->supplyCount[card]-1))
        -:   43:		{
    #####:   44:			printf("Error: Number of cards is different.\n");
        -:   45:		}
        -:   46:	else
        -:   47:		{
        1:   48:			printf("Past Check Changes Test.\n");
        -:   49:		}
        1:   50:			printf("Coins should Be: %d and is %d.\n",G->coins,(testG->coins-getCost(card)));
        1:   51:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys, (testG->numBuys-1));
        1:   52:			printf("Supply Count should Be: %d and is %d.\n\n",G->supplyCount[card], (testG->supplyCount[card]-1));
        1:   53:}
        -:   54:
        1:   55:int main(){
        -:   56:	struct gameState G, testG;
        1:   57:	int numberOfPlayers = 2;
        1:   58:	int kards[10]={adventurer, council_room, feast, gardens, mine
        -:   59:               , remodel, smithy, village, baron, great_hall};
        1:   60:	int seed = 45;
        -:   61:
        -:   62:/* Testing buyCard when not enough coins exists for user attempting buy.*/
        1:   63:	printf("Testing buyCard when not enough coins exists for user attempting buy.\n");
        1:   64:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   65:	G.coins = 0;
        1:   66:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   67:	buyCard(council_room,&G);
        1:   68:	changeCheck(1,&G,&testG);
        -:   69:
        -:   70:/* Testing buyCard when not enough buys exists for user attempting buy.*/
        1:   71:	printf("Testing buyCard when not enough buys exists for user attempting buy.\n");
        1:   72:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   73:	G.numBuys = 0;
        1:   74:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   75:	buyCard(council_room,&G);
        1:   76:	changeCheck(1,&G,&testG);
        -:   77:
        -:   78:/* Testing buyCard when not enough cards in the buy pile exists for user attempting buy.*/
        1:   79:	printf("Testing buyCard when not enough cards exists in buy pile for user attempting buy.\n");
        1:   80:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   81:	G.supplyCount[council_room] = 0;
        1:   82:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   83:	buyCard(council_room,&G);
        1:   84:	changeCheck(1,&G,&testG);
        -:   85:
        -:   86:/* Testing buyCard changes correct gamestate data after buy.*/
        1:   87:	printf("Testing buyCard changes correct gamestate data after buy.\n");
        1:   88:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   89:	G.coins = 5;
        1:   90:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   91:	buyCard(council_room,&G);
        1:   92:	checkDeductions(council_room,&G,&testG);
        -:   93:
        -:   94:/* Testing buyCard when selecting a card that is not part of the kingdom cards.*/ 
        1:   95:	printf("Testing buyCard when selecting a card that is not part of the kingdom cards.\n");
        1:   96:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   97:	G.coins = 5;
        1:   98:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   99:	buyCard(embargo,&G);
        1:  100:	changeCheck(1,&G,&testG);
        1:  101:	return 0 ;
        -:  102:}
