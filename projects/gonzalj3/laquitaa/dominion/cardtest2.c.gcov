        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - cardttest2.c seahag
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "sea_hag"
        -:   13:
        1:   14:void changeCheck(int currentPlayer, struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int x = 0, i = 0, foundCurse = 0, foundDiscard = 0;
        -:   17:	
        5:   18:	for(; x<testG->numPlayers;x++)
        -:   19:	{
        4:   20:		if(x != currentPlayer)
        -:   21:		{
       13:   22:			for(; i< testG->deckCount[x];i++)
        -:   23:				{
       10:   24:					if(G->deck[x][i]!=testG->deck[x][i])
        -:   25:					{
        1:   26:						if(G->deck[x][i]==curse)
        -:   27:						{
        1:   28:							foundCurse++;
        -:   29:						}	
        -:   30:					}
        -:   31:				}
        -:   32:		}
        -:   33:	}
        -:   34:	
        1:   35:	if(foundCurse == 3)
        -:   36:	{
    #####:   37:		printf("Past Test: Found curses.\n");
        -:   38:	}
        -:   39:	else
        -:   40:	{
        1:   41:		printf("Error: found only %d curses.\n",foundCurse);
        -:   42:	}
        -:   43:	
        1:   44:	x=0;
        -:   45:	
        1:   46:	for(; x<G->discardCount[currentPlayer];x++)
        -:   47:	{
    #####:   48:		if(G->discard[currentPlayer][x] != testG->discard[currentPlayer][x])
        -:   49:		{
    #####:   50:			foundDiscard++;
        -:   51:		}
        -:   52:	}
        -:   53:	
        1:   54:	if(foundCurse != 1)
        -:   55:	{
    #####:   56:		printf("Error: Player does not have a new discarded card.\n");
        -:   57:	}
        -:   58:	
        1:   59:	if(G->discardCount[currentPlayer]==testG->discardCount[currentPlayer])
        -:   60:	{
        1:   61:		printf("Error: Player did not increase discard count.\n");
        -:   62:	}
        1:   63:}
        -:   64:
        1:   65:int main(){
        -:   66:	struct gameState G, testG;
        1:   67:	int numberOfPlayers = 4;
        1:   68:	int kards[10]={adventurer, salvager, sea_hag, gardens, mine
        -:   69:               , remodel, smithy, village, baron, great_hall};
        1:   70:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   71:	int seed = 45;
        -:   72:
        1:   73:	printf("Testing seahag after initializing game, so current player should be 0.\n");
        1:   74:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   75:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   76:	cardEffect(sea_hag, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   77:	changeCheck(0,&G,&testG);
        -:   78:
        -:   79:
        1:   80:	return 0 ;
        -:   81:}
