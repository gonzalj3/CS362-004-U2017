        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Jose Gonzalez Assignment 3 362 - unittest1.c buyCard 
        -:    3:*/
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "rngs.h"
        -:   11:
        -:   12:#define KARD "salvager"
        -:   13:
        1:   14:void changeCheck(int card, struct gameState *G, struct gameState *testG)
        -:   15:{
        1:   16:	int x=0, numFeast =0; 
        1:   17:	if(G->coins != (testG->coins+4))
        -:   18:		{
        1:   19:			printf("Error: Number of Coins has not increased by the correct number of coins.\n");
        -:   20:		}
    #####:   21:	else if(G->numBuys != (testG->numBuys+1))
        -:   22:		{
    #####:   23:			printf("Error: Number of Buys has not increased by one.\n");
        -:   24:		}
    #####:   25:	else if(G->supplyCount[card] == (testG->supplyCount[card]+1))
        -:   26:		{
    #####:   27:			printf("Error: Number of cards in draw pile has increased when no change should have occurred.\n");
        -:   28:		}
    #####:   29:	else if(G->handCount[0] != (testG->handCount[0]-1))
        -:   30:		{
    #####:   31:			printf("Error: Number of cards player's hand did not decrease.\n");
        -:   32:		}		
    #####:   33:	else if(G->deckCount[0] != (testG->deckCount[0]-1))
        -:   34:		{
    #####:   35:			printf("Error: Number of cards in the player's hand and deck did not decrease.\n");
        -:   36:		}	
        -:   37:	else
        -:   38:		{
    #####:   39:			printf("Past Check Changes Test.\n");
        -:   40:		}
        1:   41:			printf("Coins should Be: %d and is %d.\n",G->coins,testG->coins+4);
        1:   42:			printf("Number of Buys should Be: %d and is %d.\n",G->numBuys,testG->numBuys+1);
        5:   43:	for(; x<G->handCount[0];x++)
        -:   44:	{
        4:   45:		if(G->hand[0][x]==feast)
        -:   46:		{
    #####:   47:			numFeast++;
        -:   48:		}	
        -:   49:	}
        1:   50:	printf("The number of feast card piles is %d and is suppose to be 0. \n",numFeast);	}
        -:   51:
        -:   52:
        1:   53:int main(){
        -:   54:	struct gameState G, testG;
        1:   55:	int numberOfPlayers = 2;
        1:   56:	int kards[10]={adventurer, salvager, feast, gardens, mine
        -:   57:               , remodel, smithy, village, baron, great_hall};
        1:   58:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, x=0;
        1:   59:	int seed = 45;
        -:   60:
        1:   61:	printf("Testing salvager.	\n");
        1:   62:	initializeGame(numberOfPlayers, kards, seed, &G);
        1:   63:	G.coins = 10;
        6:   64:	for(; x<G.handCount[0];x++)
        -:   65:	{
        5:   66:		if(G.hand[0][x]==feast)
        -:   67:		{
    #####:   68:			G.hand[0][x]=gardens;
        -:   69:		}	
        -:   70:	}
        1:   71:	G.hand[0][0] = feast;
        -:   72:	
        1:   73:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   74:	cardEffect(salvager, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   75:	changeCheck(KARD,&G,&testG);
        -:   76:
        -:   77:
        1:   78:	return 0 ;
        -:   79:}
